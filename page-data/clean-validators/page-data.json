{"componentChunkName":"component---src-templates-post-jsx","path":"/clean-validators/","result":{"data":{"site":{"siteMetadata":{"title":"hongo"}},"markdownRemark":{"id":"6fb810bb-d784-5bde-8528-947db9b3fd9f","excerpt":"필드 별로 유효성 검사 함수 추가 적용 MinLengthValidator가 이미 존재하긴함 모델단에도 설정 가능~ models.py에서 설정해 ModelForm에서 사용할수도있다 models.py forms.py 모델단에 지정한 validator를 ModelForm이 알아서 가져감 유효성 검사 호출 로직 form.is_valid() 가 호출되었을 때 1.…","html":"<h3>필드 별로 유효성 검사 함수 추가 적용</h3>\n<hr>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django <span class=\"token keyword\">import</span> forms\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">min_length_3_validator</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">raise</span> form<span class=\"token punctuation\">.</span>ValidationError<span class=\"token punctuation\">(</span><span class=\"token string\">\"3글자 이상 입력해주세요\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PostForm</span><span class=\"token punctuation\">(</span>forms<span class=\"token punctuation\">.</span>Form<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    title <span class=\"token operator\">=</span> forms<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>validators<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span>min_length_3_validators<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><em>MinLengthValidator가 이미 존재하긴함</em></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>validators <span class=\"token keyword\">import</span> MinLengthValidator\n\nmin_length_3_validator <span class=\"token operator\">=</span> MinLengthValidator<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h4>모델단에도 설정 가능~</h4>\n<hr>\n<p><strong>models.py에서 설정해 ModelForm에서 사용할수도있다</strong></p>\n<h1>models.py</h1>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django <span class=\"token keyword\">import</span> models\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">min_length_3_validator</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">raise</span> form<span class=\"token punctuation\">.</span>ValidationError<span class=\"token punctuation\">(</span><span class=\"token string\">\"3글자 이상 입력해주세요\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Post</span><span class=\"token punctuation\">(</span>forms<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    title <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> validators<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span>min_length_3_validator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    content <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>TextField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h1>forms.py</h1>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django <span class=\"token keyword\">import</span> forms\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> Post\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PostForm</span><span class=\"token punctuation\">(</span>form<span class=\"token punctuation\">.</span>ModelForm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Meta</span><span class=\"token punctuation\">:</span>\n        model <span class=\"token operator\">=</span> Post\n        fields <span class=\"token operator\">=</span> <span class=\"token string\">'__all__'</span>\n        <span class=\"token comment\">#fields = ['title', 'content']</span></code></pre></div>\n<p>모델단에 지정한 validator를 ModelForm이 알아서 가져감</p>\n<h3>유효성 검사 호출 로직</h3>\n<hr>\n<p><strong>form.is_valid() 가 호출되었을 때</strong></p>\n<h4>1. form.full_clean() 호출</h4>\n<p>​ <strong>1. 각 필드 객체 별로 수행</strong></p>\n<p>​ 각 필드객체.clean() 호출을 통해 각 필드 Type에 맞춰 유효성 검사</p>\n<p>​ ex) email field가 email 형식인지</p>\n<p>​ <code class=\"language-text\">clean()</code>은 <code class=\"language-text\">is_valid()</code>가 호출되면 내부적으로 수행된다.</p>\n<p>​ <strong>2. Form 객체 내에서</strong></p>\n<p>​ 필드 이름 별로 Formr객체.clean_필드명() 함수가 있다면 호출해서 유효성 검사</p>\n<p>​ Form객체.clean() 함수가 있다면 호출해서 유횽성 검사</p>\n<p>​ # ex)</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> re\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PostForm</span><span class=\"token punctuation\">(</span>form<span class=\"token punctuation\">.</span>ModelForm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Meta</span><span class=\"token punctuation\">:</span>\n        model <span class=\"token operator\">=</span> Post\n        field <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'photo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'tag_set'</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">clean_message</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        message <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>cleaned_data<span class=\"token punctuation\">(</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> message<span class=\"token punctuation\">:</span>\n            message <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>sub<span class=\"token punctuation\">(</span><span class=\"token string\">r'[a-zA-z]+'</span><span class=\"token punctuation\">,</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span>message<span class=\"token punctuation\">)</span>\n            <span class=\"token comment\">#영어 제거</span>\n        <span class=\"token keyword\">return</span> message</code></pre></div>\n<p>drf 시리얼라이저에서는 clean대신 validator</p>\n<h3>Form에서 수행하는 2가지 유효성 검사</h3>\n<hr>\n<p><strong>1. Validator 함수를 통한 유효성 검사</strong></p>\n<p>값이 원하는 조건에 맞지 않을 때 ValidationError 예외를 발생</p>\n<ul>\n<li>리턴 값은 사용되지 않는다</li>\n<li>인자 하나를 받는다</li>\n</ul>\n<p>**2. Form 클래스 내 clean, clean_멤버함수를 통한 유효성 검사 및 값 변경 **</p>\n<p>값이 원하는 조건에 맞지 않을 때 ValidationError 예외를 발생</p>\n<ul>\n<li>리턴값을 통해 값 반환</li>\n</ul>\n<h3>함수형/클래스형 Validator</h3>\n<hr>\n<h4>함수형</h4>\n<p>​ 유효성 검사를 수행할 값 인자를 1개 받은 Callable Object</p>\n<h4>클래스형</h4>\n<p>​ 클래스의 인스턴스가 Callable Object : __call__함수 존재</p>\n<h4>but 빌트인 Validator를 잘 사용하자!</h4>\n<h3>언제 validators를 쓰고, 언제 clean을 사용할까?</h3>\n<hr>\n<p><strong>가급적이면 모든 validators는 모델에 정의하고 ModelForm을 통해 모델의 validators 정보를 가져오기!</strong></p>\n<p><strong>clean이 필요할 때는</strong></p>\n<p>특정 Form에서 1회성 유효성 검사 루틴이 필요할 때</p>\n<p>다수 필드값에 걸쳐서, 유효성 검사가 필요할 때</p>\n<p>필드 값을 변경할 필요가 있을 때 (validator는 값만 체크할 뿐, 값을 변경할 수는 없음)</p>","frontmatter":{"title":"장고 폼의 유효성 검사 : clean과 validators","date":"April 12, 2022","update":null,"tags":["django","askcompany"],"series":"askcompany"},"fields":{"slug":"/clean-validators/","readingTime":{"minutes":3.31}}},"seriesList":{"edges":[{"node":{"id":"8c418e59-f9a5-5fdb-8f42-e3dff2ff08a9","fields":{"slug":"/django-ORM/"},"frontmatter":{"title":"django ORM"}}},{"node":{"id":"3fab5510-8f86-511d-b0a7-6031ea7f95f8","fields":{"slug":"/rest/"},"frontmatter":{"title":"REST"}}},{"node":{"id":"e41b821c-ba53-5e84-a1ae-c7c4cba634b5","fields":{"slug":"/static-media/"},"frontmatter":{"title":"django의 Static & Media 파일"}}},{"node":{"id":"32500d0b-16dd-5e7c-a16c-b45dd8cf9f0c","fields":{"slug":"/django-admin/"},"frontmatter":{"title":"django ORM"}}},{"node":{"id":"c52011a6-a94e-5aa8-9612-9c3a352654e9","fields":{"slug":"/json/"},"frontmatter":{"title":"작성중 : json 응답뷰 만들기"}}},{"node":{"id":"97fa8fe6-4603-5a9f-b2f0-c32be0c80118","fields":{"slug":"/view-decorators/"},"frontmatter":{"title":"decorator를 사용해서 Django view 꾸며보기"}}},{"node":{"id":"125af04d-f31e-5dd0-8176-39fec9d54510","fields":{"slug":"/CBV-api/"},"frontmatter":{"title":"CBV api 사용해보기"}}},{"node":{"id":"34e238b9-dd92-5457-846a-8b6d13e76798","fields":{"slug":"/queryset/"},"frontmatter":{"title":"작성중 : 쓸만해보이는 쿼리셋팁"}}},{"node":{"id":"cdf383e6-f2a6-5939-8887-e7501d318084","fields":{"slug":"/http-status-code/"},"frontmatter":{"title":"HTTP 상태 코드"}}},{"node":{"id":"8f38a40f-0d0e-5e23-9922-b0286f3b8a2b","fields":{"slug":"/get-absolute-url/"},"frontmatter":{"title":"detail url을 간단하게 하고싶다면, get_absolute_url"}}},{"node":{"id":"9ea22a57-02a3-5785-af73-eaabf2a736b4","fields":{"slug":"/httprequest-httpresponse/"},"frontmatter":{"title":"HTTPRequest와 HttpResponse"}}},{"node":{"id":"e3bfa53a-3d48-554e-beb7-4648630c16d0","fields":{"slug":"/form-modelform/"},"frontmatter":{"title":"Django의 Form과 ModelForm"}}},{"node":{"id":"6fb810bb-d784-5bde-8528-947db9b3fd9f","fields":{"slug":"/clean-validators/"},"frontmatter":{"title":"장고 폼의 유효성 검사 : clean과 validators"}}},{"node":{"id":"1f084815-ec52-5f58-a947-ec38e1f5a9f0","fields":{"slug":"/messages/"},"frontmatter":{"title":"Django의 Messages Framework"}}},{"node":{"id":"24b75555-99e9-5cf5-b345-7f02926c7b6d","fields":{"slug":"/CBV-api2/"},"frontmatter":{"title":"CBV api 사용해보기2 : crud"}}},{"node":{"id":"c2a4c8ba-644c-5a2e-a5fb-fefc3d400a11","fields":{"slug":"/serializer/"},"frontmatter":{"title":"REST"}}},{"node":{"id":"71a681c8-2fc0-5652-ba2c-5ad25267c318","fields":{"slug":"/LoginView/"},"frontmatter":{"title":"Django LoginView 사용"}}}]},"previous":{"fields":{"slug":"/form-modelform/"},"frontmatter":{"title":"Django의 Form과 ModelForm"}},"next":{"fields":{"slug":"/messages/"},"frontmatter":{"title":"Django의 Messages Framework"}}},"pageContext":{"id":"6fb810bb-d784-5bde-8528-947db9b3fd9f","series":"askcompany","previousPostId":"e3bfa53a-3d48-554e-beb7-4648630c16d0","nextPostId":"1f084815-ec52-5f58-a947-ec38e1f5a9f0"}},"staticQueryHashes":[]}