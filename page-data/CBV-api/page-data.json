{"componentChunkName":"component---src-templates-post-jsx","path":"/CBV-api/","result":{"data":{"site":{"siteMetadata":{"title":"hongo"}},"markdownRemark":{"id":"125af04d-f31e-5dd0-8176-39fec9d54510","excerpt":"view는 무조건 HttpResponse객체를 반환해야한다. CBV Class Based View : View 함수를 만들어주는 클래스  클래스 함수를 통해, View 함수를 생성 상속을 통해 여러 기능들을 믹스인 CBV API Base views , ,  Generic display views ​ , , Generic date views Generic …","html":"<p>view는 무조건 HttpResponse객체를 반환해야한다.</p>\n<h3>CBV</h3>\n<hr>\n<p><strong>Class Based View</strong> : View 함수를 만들어주는 클래스</p>\n<ul>\n<li><code class=\"language-text\">as_view()</code> 클래스 함수를 통해, View 함수를 생성</li>\n<li>상속을 통해 여러 기능들을 믹스인</li>\n</ul>\n<h4>CBV API</h4>\n<hr>\n<ul>\n<li>\n<p><strong>Base views</strong></p>\n<p><code class=\"language-text\">View</code>, <code class=\"language-text\">TemplateView</code>, <code class=\"language-text\">RedirectView</code></p>\n</li>\n<li><strong>Generic display views</strong></li>\n</ul>\n<p>​ <code class=\"language-text\">DetailView</code>, <code class=\"language-text\">ListView</code>,</p>\n<ul>\n<li><strong>Generic date views</strong></li>\n<li>\n<p><strong>Generic editing views</strong></p>\n<p><code class=\"language-text\">FormView</code>, <code class=\"language-text\">CreateView</code>, <code class=\"language-text\">UpdateView</code>, <code class=\"language-text\">DeleteView</code></p>\n</li>\n</ul>\n<h3>CBV api 활용 예시(Generic display views)</h3>\n<hr>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">DetailView</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>model <span class=\"token operator\">=</span> model\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get_object</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> get_object_or_404<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">,</span> <span class=\"token builtin\">id</span> <span class=\"token operator\">=</span> kwargs<span class=\"token punctuation\">[</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#get_object_or_404를 통해 detail을 보고자하는 모델 인스턴스를 찾아 반환한다.</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get_template_name</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">'{}/{}_detail.html'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>\n        \tself<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span>_meta<span class=\"token punctuation\">.</span>app_label<span class=\"token punctuation\">,</span> <span class=\"token comment\">#앱이름</span>\n            self<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span>_meta<span class=\"token punctuation\">.</span>model_name <span class=\"token comment\">#모델명</span>\n        <span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">#ex) instagram앱의 post모델을 가져올경우instagram/post_detail.html 을 반환해준다</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">object</span> <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>get_object<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> render<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>get_template_name<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span>\n            self<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span>_meta<span class=\"token punctuation\">.</span>model_name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">object</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token comment\"># post: 찾고자하는 post객체</span>\n\n    <span class=\"token decorator annotation punctuation\">@classmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">as_view</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token comment\">#cls 는 알아서 들어옴</span>\n        <span class=\"token keyword\">def</span> <span class=\"token function\">view</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            self <span class=\"token operator\">=</span> cls<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>dispatch<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> view</code></pre></div>\n<h4>1. SingleObjectMixin 클래스의 필드</h4>\n<p><strong>SingleObjectMixin</strong> : 제네릭뷰의 리스트뷰나 디테일뷰에 상속되는 클래스</p>\n<p><code class=\"language-text\">model</code> : 어떤 모델 객체를 사용할 것 인지. 모델 객체를 통해 해당 모델이 소속된 앱이름도 알 수 있다. 나중에 app/model_detail.html등 template를 자동으로 불러오는데 사용된다.</p>\n<p><code class=\"language-text\">queryset</code> : 어떤 쿼리셋을 적용할 것인지. 리스트 해줄 모델 인스턴스들을 정할 수 있다.</p>\n<p>​ 쿼리셋이 없다면 default로 입력된 model명을 사용해서 <code class=\"language-text\">model.objects.all()</code>을 가져온다.</p>\n<p>​ 해당 클래스의 함수를 보면 <code class=\"language-text\">self.model._default_manager.all()</code>이라 되어있는데 <code class=\"language-text\">_default_manager</code>이 <code class=\"language-text\">objects</code>이다.</p>\n<p>물론 쿼리셋을 바꿀수도있다. ex) <code class=\"language-text\">queryset = Post.objects.filter(is_public = True)</code></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">PostDetailView</span><span class=\"token punctuation\">(</span>DetailView<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    model <span class=\"token operator\">=</span> Post\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get_queryset</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#DetailView에 있는 get_queryset함수를 오버라이딩한다.</span>\n        qs <span class=\"token operator\">=</span> <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>get_queryset<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#defual qs 오버라이딩</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> self<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>is_authenticated<span class=\"token punctuation\">:</span>\n\t        qs <span class=\"token operator\">=</span> qs<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>is_public<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> qs</code></pre></div>\n<p><code class=\"language-text\">pk_url_kwarg</code> : default값은 pk</p>\n<p>​ url에서 <code class=\"language-text\">&lt;int:id></code> 형태로 받는 인자를 나타낸다. 예시와 같이 id의 경우 <code class=\"language-text\">pk_url_kwarg = 'id'</code>로 바꿔준다.</p>\n<p><code class=\"language-text\">context_object_name</code> : render등으로 {'post' : post} 식으로 넘겨줄때 key이름을 정함. default로 <code class=\"language-text\">모델명</code>과 <code class=\"language-text\">'object'</code> 사용 가능</p>\n<h4>2. ListView</h4>\n<hr>\n<p>1개의 모델에 대한 List 템플릿 처리<br>\n모델명소문자_list 이름의 쿼리셋을 템플릿에 전달(object_list도 같이 전달해준다)<br>\n페이징 처리 지원 가능</p>\n<p>페이징 예시</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">ListView<span class=\"token punctuation\">.</span>as_view<span class=\"token punctuation\">(</span>model<span class=\"token operator\">=</span>Post<span class=\"token punctuation\">,</span> paginate_by <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>필드인 <code class=\"language-text\">page_obj</code>를 통해 현재 페이지를 확인할 수 있다\n<code class=\"language-text\">&lt;Page 3 of 11></code> 로 표기됨</p>\n<p>django-bootstrap4를 설치해서 꾸미기가능</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">{% load bootstrap4%} {% bootstrap_pagination page_obj size = \"small\"\njustify_content = \"center\" %}</code></pre></div>\n<p><em>view.py</em></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>view<span class=\"token punctuation\">.</span>generic <span class=\"token keyword\">import</span> ListView\n<span class=\"token keyword\">from</span> shop<span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> Item\n\nitem_list <span class=\"token operator\">=</span> ListView<span class=\"token punctuation\">.</span>as_view<span class=\"token punctuation\">(</span>model<span class=\"token operator\">=</span>Item<span class=\"token punctuation\">)</span></code></pre></div>\n<p><em>urls.py</em></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>urls <span class=\"token keyword\">import</span> path\n\nurlpatterns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    path<span class=\"token punctuation\">(</span><span class=\"token string\">'items/'</span><span class=\"token punctuation\">,</span> item_list<span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'item_list'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>단순 리스트 기능만 제공. 검색 기능등 다른 기능은 직접 추가해야함</p>\n<h4>3. DetailView</h4>\n<hr>\n<p>views.py</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>views<span class=\"token punctuation\">.</span>generic <span class=\"token keyword\">import</span> DetailView\n\npost_detail <span class=\"token operator\">=</span> DetailView<span class=\"token punctuation\">.</span>as_view<span class=\"token punctuation\">(</span>model <span class=\"token operator\">=</span> Post<span class=\"token punctuation\">,</span> pk_url_kwarg <span class=\"token operator\">=</span> <span class=\"token string\">'id'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#pk_url_kwarg는 urls.py에서 적은 url에 들어갈 인자이다.</span>\n<span class=\"token comment\">#만약 urls.py에 path('post/&lt;int:pk>/',post_detail)</span>\n<span class=\"token comment\">#이라고 적었다면 pk_url_kwarg는 생략 가능하다</span>\n<span class=\"token comment\">#post_detail = DetailView.as_view(model = Post)</span></code></pre></div>\n<p>urls.py</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">urlpatterns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    path<span class=\"token punctuation\">(</span><span class=\"token string\">'post/&lt;int:id>/'</span><span class=\"token punctuation\">,</span> post_detail<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>상속을 통한 CBV 속성정리</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">PostDetailView</span><span class=\"token punctuation\">(</span>DetailView<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    model <span class=\"token operator\">=</span> Post\n    pk_url_kwarg <span class=\"token operator\">=</span> <span class=\"token string\">'id'</span>\n\npost_detail <span class=\"token operator\">=</span> PostDetailView<span class=\"token punctuation\">.</span>as_view<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h4>4. RedirectView</h4>\n<hr>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">urlpatterns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    path<span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span> RedirectView<span class=\"token punctuation\">.</span>as_view<span class=\"token punctuation\">(</span>url <span class=\"token operator\">=</span> <span class=\"token string\">'/instagram/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># url 주소가 서버/instagram/인 곳으로 리다이렉트해줌</span>\n\nurlpatterns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    path<span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span> RedirectView<span class=\"token punctuation\">.</span>as_view<span class=\"token punctuation\">(</span>pattern_name<span class=\"token operator\">=</span><span class=\"token string\">'instagram:post_list'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># url path를 적을 때 설정한 name을 사용해서 이동시킴 앱:name</span></code></pre></div>","frontmatter":{"title":"CBV api 사용해보기","date":"April 10, 2022","update":null,"tags":["django","python"],"series":"askcompany"},"fields":{"slug":"/CBV-api/","readingTime":{"minutes":4.31}}},"seriesList":{"edges":[{"node":{"id":"8c418e59-f9a5-5fdb-8f42-e3dff2ff08a9","fields":{"slug":"/django-ORM/"},"frontmatter":{"title":"django ORM"}}},{"node":{"id":"3fab5510-8f86-511d-b0a7-6031ea7f95f8","fields":{"slug":"/rest/"},"frontmatter":{"title":"REST"}}},{"node":{"id":"e41b821c-ba53-5e84-a1ae-c7c4cba634b5","fields":{"slug":"/static-media/"},"frontmatter":{"title":"django의 Static & Media 파일"}}},{"node":{"id":"32500d0b-16dd-5e7c-a16c-b45dd8cf9f0c","fields":{"slug":"/django-admin/"},"frontmatter":{"title":"django ORM"}}},{"node":{"id":"c52011a6-a94e-5aa8-9612-9c3a352654e9","fields":{"slug":"/json/"},"frontmatter":{"title":"작성중 : json 응답뷰 만들기"}}},{"node":{"id":"97fa8fe6-4603-5a9f-b2f0-c32be0c80118","fields":{"slug":"/view-decorators/"},"frontmatter":{"title":"decorator를 사용해서 Django view 꾸며보기"}}},{"node":{"id":"125af04d-f31e-5dd0-8176-39fec9d54510","fields":{"slug":"/CBV-api/"},"frontmatter":{"title":"CBV api 사용해보기"}}},{"node":{"id":"34e238b9-dd92-5457-846a-8b6d13e76798","fields":{"slug":"/queryset/"},"frontmatter":{"title":"작성중 : 쓸만해보이는 쿼리셋팁"}}},{"node":{"id":"cdf383e6-f2a6-5939-8887-e7501d318084","fields":{"slug":"/http-status-code/"},"frontmatter":{"title":"HTTP 상태 코드"}}},{"node":{"id":"8f38a40f-0d0e-5e23-9922-b0286f3b8a2b","fields":{"slug":"/get-absolute-url/"},"frontmatter":{"title":"detail url을 간단하게 하고싶다면, get_absolute_url"}}},{"node":{"id":"9ea22a57-02a3-5785-af73-eaabf2a736b4","fields":{"slug":"/httprequest-httpresponse/"},"frontmatter":{"title":"HTTPRequest와 HttpResponse"}}},{"node":{"id":"e3bfa53a-3d48-554e-beb7-4648630c16d0","fields":{"slug":"/form-modelform/"},"frontmatter":{"title":"Django의 Form과 ModelForm"}}},{"node":{"id":"6fb810bb-d784-5bde-8528-947db9b3fd9f","fields":{"slug":"/clean-validators/"},"frontmatter":{"title":"장고 폼의 유효성 검사 : clean과 validators"}}},{"node":{"id":"1f084815-ec52-5f58-a947-ec38e1f5a9f0","fields":{"slug":"/messages/"},"frontmatter":{"title":"Django의 Messages Framework"}}},{"node":{"id":"24b75555-99e9-5cf5-b345-7f02926c7b6d","fields":{"slug":"/CBV-api2/"},"frontmatter":{"title":"CBV api 사용해보기2 : crud"}}},{"node":{"id":"c2a4c8ba-644c-5a2e-a5fb-fefc3d400a11","fields":{"slug":"/serializer/"},"frontmatter":{"title":"REST"}}},{"node":{"id":"71a681c8-2fc0-5652-ba2c-5ad25267c318","fields":{"slug":"/LoginView/"},"frontmatter":{"title":"Django LoginView 사용"}}}]},"previous":{"fields":{"slug":"/view-decorators/"},"frontmatter":{"title":"decorator를 사용해서 Django view 꾸며보기"}},"next":{"fields":{"slug":"/instance-flex/"},"frontmatter":{"title":"장고하다가 모델 인스턴스 뻥튀기 하고싶을때"}}},"pageContext":{"id":"125af04d-f31e-5dd0-8176-39fec9d54510","series":"askcompany","previousPostId":"97fa8fe6-4603-5a9f-b2f0-c32be0c80118","nextPostId":"3e388686-2418-5776-a4f4-7d485967ad50"}},"staticQueryHashes":[]}