{"componentChunkName":"component---src-templates-post-jsx","path":"/serializer/","result":{"data":{"site":{"siteMetadata":{"title":"hongo"}},"markdownRemark":{"id":"7c003db0-96e2-515f-9554-4034c9b44f25","excerpt":"APIView를 활용한 뷰 만들기 Serializer 정의 첫 번째 인자로 인스턴스를 받음 instance는 객체 post, put하는데 사용 두 번째 인자로 데이터를 받음 data는 form에서 requests.POST'name'가져오는것처럼 data를 받아오는 거인듯 Form 에서 첫 번째 인자는 data지만 시리얼라이저의 생성자의 첫 번째 인자는 i…","html":"<h1>APIView를 활용한 뷰 만들기</h1>\n<h2>Serializer 정의</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">PostSerializer</span><span class=\"token punctuation\">(</span>serializers<span class=\"token punctuation\">.</span>ModelSerializer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Meta</span><span class=\"token punctuation\">:</span>\n        model <span class=\"token operator\">=</span> Post\n        fields <span class=\"token operator\">=</span> <span class=\"token string\">'__all__'</span>\n\nserializer <span class=\"token operator\">=</span> PostSerializer<span class=\"token punctuation\">(</span>data<span class=\"token operator\">=</span>request<span class=\"token punctuation\">.</span>POST<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> serializer<span class=\"token punctuation\">.</span>is_valid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span>serializer<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> status<span class=\"token operator\">=</span><span class=\"token number\">201</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#form의 __clean_data처럼 serializer.data를 통해 유효성 검사를 거친 데이터를 가져올 수 있다.</span>\n<span class=\"token comment\">#이건 장고 restframework의 기능을 안쓰고 form의 기능만 쓴 것</span>\n<span class=\"token comment\">#drf를 적용하려면 APIView 클래스 혹은 @api_view 장식자를 사용한다</span>\n<span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span>serializer<span class=\"token punctuation\">.</span>errors<span class=\"token punctuation\">,</span> status<span class=\"token operator\">=</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>\n<p>첫 번째 인자로 인스턴스를 받음</p>\n<ul>\n<li>instance는 객체 post, put하는데 사용</li>\n</ul>\n</li>\n<li>\n<p>두 번째 인자로 데이터를 받음</p>\n<ul>\n<li>data는 form에서 requests.POST['name']가져오는것처럼 data를 받아오는 거인듯</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>Form 에서 첫 번째 인자는 data지만 시리얼라이저의 생성자의 첫 번째 인자는 instance이다</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">PostSerializer<span class=\"token punctuation\">(</span>Post<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 인스턴스 객체를 넘겨준다</span>\nPostSerializer<span class=\"token punctuation\">(</span>Post<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> many <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 다수도 가능</span>\nPostSerializer<span class=\"token punctuation\">(</span>Post<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>data <span class=\"token comment\"># 직렬화된 데이터가 나온다</span></code></pre></div>\n<h2>APIView</h2>","frontmatter":{"title":"REST","date":"April 18, 2022","update":null,"tags":["django","DRF"],"series":"askcompany"},"fields":{"slug":"/serializer/","readingTime":{"minutes":1.165}}},"seriesList":{"edges":[{"node":{"id":"8fefea4f-9b6f-57a4-a7e4-5aedf423b925","fields":{"slug":"/django-ORM/"},"frontmatter":{"title":"django ORM"}}},{"node":{"id":"86119087-6333-5ffe-a5f6-f42ab50e217e","fields":{"slug":"/rest/"},"frontmatter":{"title":"REST"}}},{"node":{"id":"78b9f4e7-a2e2-51b5-894c-6d78a96fb311","fields":{"slug":"/django-admin/"},"frontmatter":{"title":"django ORM"}}},{"node":{"id":"f82631d3-2495-5141-9090-480ac221f298","fields":{"slug":"/static-media/"},"frontmatter":{"title":"django의 Static & Media 파일"}}},{"node":{"id":"3632237d-c865-57f5-84d3-42504c3efe06","fields":{"slug":"/json/"},"frontmatter":{"title":"작성중 : json 응답뷰 만들기"}}},{"node":{"id":"54c123f3-caed-5153-832f-931f477f7c6c","fields":{"slug":"/get-absolute-url/"},"frontmatter":{"title":"detail url을 간단하게 하고싶다면, get_absolute_url"}}},{"node":{"id":"bb14e873-7ffb-5e44-adaf-418bc7557714","fields":{"slug":"/http-status-code/"},"frontmatter":{"title":"HTTP 상태 코드"}}},{"node":{"id":"619670e5-53bd-549d-ae35-4f7bfc46d7b4","fields":{"slug":"/queryset/"},"frontmatter":{"title":"작성중 : 쓸만해보이는 쿼리셋팁"}}},{"node":{"id":"bf47726e-6688-5b10-9994-37de18c463c8","fields":{"slug":"/CBV-api/"},"frontmatter":{"title":"CBV api 사용해보기"}}},{"node":{"id":"23091801-a214-5f20-98df-ea82cba424a3","fields":{"slug":"/view-decorators/"},"frontmatter":{"title":"decorator를 사용해서 Django view 꾸며보기"}}},{"node":{"id":"cf0a3ceb-264d-527d-a369-8477a225e7cb","fields":{"slug":"/httprequest-httpresponse/"},"frontmatter":{"title":"HTTPRequest와 HttpResponse"}}},{"node":{"id":"47c287be-bd57-553c-809d-6e0b429f2434","fields":{"slug":"/clean-validators/"},"frontmatter":{"title":"장고 폼의 유효성 검사 : clean과 validators"}}},{"node":{"id":"8b966cb7-047c-5f95-ab4c-d581964cfaa0","fields":{"slug":"/form-modelform/"},"frontmatter":{"title":"Django의 Form과 ModelForm"}}},{"node":{"id":"705c8614-423d-5587-87fb-b8c8b39fb2f6","fields":{"slug":"/CBV-api2/"},"frontmatter":{"title":"CBV api 사용해보기2 : crud"}}},{"node":{"id":"dfa69f72-f805-5b2f-b10c-27700449ef51","fields":{"slug":"/messages/"},"frontmatter":{"title":"Django의 Messages Framework"}}},{"node":{"id":"7c003db0-96e2-515f-9554-4034c9b44f25","fields":{"slug":"/serializer/"},"frontmatter":{"title":"REST"}}},{"node":{"id":"33b29129-f5ac-57b7-b66e-814169eebcbc","fields":{"slug":"/LoginView/"},"frontmatter":{"title":"Django LoginView 사용"}}}]},"previous":{"fields":{"slug":"/symmetric-cipher/"},"frontmatter":{"title":"3-2 Symmetric Cipher Model (고전 암호)"}},"next":{"fields":{"slug":"/finite-field/"},"frontmatter":{"title":"4-2 finite field (Galois Field)"}}},"pageContext":{"id":"7c003db0-96e2-515f-9554-4034c9b44f25","series":"askcompany","previousPostId":"dc9ea5bb-374d-534c-a413-adc23222b506","nextPostId":"33246c96-e01f-5f26-9fe0-935c2ea6d6c8"}},"staticQueryHashes":[]}