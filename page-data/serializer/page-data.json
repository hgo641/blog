{"componentChunkName":"component---src-templates-post-jsx","path":"/serializer/","result":{"data":{"site":{"siteMetadata":{"title":"hongo"}},"markdownRemark":{"id":"c2a4c8ba-644c-5a2e-a5fb-fefc3d400a11","excerpt":"APIView를 활용한 뷰 만들기 Serializer 정의 첫 번째 인자로 인스턴스를 받음 instance는 객체 post, put하는데 사용 두 번째 인자로 데이터를 받음 data는 form에서 requests.POST'name'가져오는것처럼 data를 받아오는 거인듯 Form 에서 첫 번째 인자는 data지만 시리얼라이저의 생성자의 첫 번째 인자는 i…","html":"<h1>APIView를 활용한 뷰 만들기</h1>\n<h2>Serializer 정의</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">PostSerializer</span><span class=\"token punctuation\">(</span>serializers<span class=\"token punctuation\">.</span>ModelSerializer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Meta</span><span class=\"token punctuation\">:</span>\n        model <span class=\"token operator\">=</span> Post\n        fields <span class=\"token operator\">=</span> <span class=\"token string\">'__all__'</span>\n\nserializer <span class=\"token operator\">=</span> PostSerializer<span class=\"token punctuation\">(</span>data<span class=\"token operator\">=</span>request<span class=\"token punctuation\">.</span>POST<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> serializer<span class=\"token punctuation\">.</span>is_valid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span>serializer<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> status<span class=\"token operator\">=</span><span class=\"token number\">201</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#form의 __clean_data처럼 serializer.data를 통해 유효성 검사를 거친 데이터를 가져올 수 있다.</span>\n<span class=\"token comment\">#이건 장고 restframework의 기능을 안쓰고 form의 기능만 쓴 것</span>\n<span class=\"token comment\">#drf를 적용하려면 APIView 클래스 혹은 @api_view 장식자를 사용한다</span>\n<span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span>serializer<span class=\"token punctuation\">.</span>errors<span class=\"token punctuation\">,</span> status<span class=\"token operator\">=</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>\n<p>첫 번째 인자로 인스턴스를 받음</p>\n<ul>\n<li>instance는 객체 post, put하는데 사용</li>\n</ul>\n</li>\n<li>\n<p>두 번째 인자로 데이터를 받음</p>\n<ul>\n<li>data는 form에서 requests.POST['name']가져오는것처럼 data를 받아오는 거인듯</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>Form 에서 첫 번째 인자는 data지만 시리얼라이저의 생성자의 첫 번째 인자는 instance이다</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">PostSerializer<span class=\"token punctuation\">(</span>Post<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 인스턴스 객체를 넘겨준다</span>\nPostSerializer<span class=\"token punctuation\">(</span>Post<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> many <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 다수도 가능</span>\nPostSerializer<span class=\"token punctuation\">(</span>Post<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>data <span class=\"token comment\"># 직렬화된 데이터가 나온다</span></code></pre></div>\n<h2>APIView</h2>","frontmatter":{"title":"REST","date":"April 18, 2022","update":null,"tags":["django","DRF"],"series":"askcompany"},"fields":{"slug":"/serializer/","readingTime":{"minutes":1.165}}},"seriesList":{"edges":[{"node":{"id":"8c418e59-f9a5-5fdb-8f42-e3dff2ff08a9","fields":{"slug":"/django-ORM/"},"frontmatter":{"title":"django ORM"}}},{"node":{"id":"3fab5510-8f86-511d-b0a7-6031ea7f95f8","fields":{"slug":"/rest/"},"frontmatter":{"title":"REST"}}},{"node":{"id":"e41b821c-ba53-5e84-a1ae-c7c4cba634b5","fields":{"slug":"/static-media/"},"frontmatter":{"title":"django의 Static & Media 파일"}}},{"node":{"id":"32500d0b-16dd-5e7c-a16c-b45dd8cf9f0c","fields":{"slug":"/django-admin/"},"frontmatter":{"title":"django ORM"}}},{"node":{"id":"c52011a6-a94e-5aa8-9612-9c3a352654e9","fields":{"slug":"/json/"},"frontmatter":{"title":"작성중 : json 응답뷰 만들기"}}},{"node":{"id":"97fa8fe6-4603-5a9f-b2f0-c32be0c80118","fields":{"slug":"/view-decorators/"},"frontmatter":{"title":"decorator를 사용해서 Django view 꾸며보기"}}},{"node":{"id":"125af04d-f31e-5dd0-8176-39fec9d54510","fields":{"slug":"/CBV-api/"},"frontmatter":{"title":"CBV api 사용해보기"}}},{"node":{"id":"34e238b9-dd92-5457-846a-8b6d13e76798","fields":{"slug":"/queryset/"},"frontmatter":{"title":"작성중 : 쓸만해보이는 쿼리셋팁"}}},{"node":{"id":"cdf383e6-f2a6-5939-8887-e7501d318084","fields":{"slug":"/http-status-code/"},"frontmatter":{"title":"HTTP 상태 코드"}}},{"node":{"id":"8f38a40f-0d0e-5e23-9922-b0286f3b8a2b","fields":{"slug":"/get-absolute-url/"},"frontmatter":{"title":"detail url을 간단하게 하고싶다면, get_absolute_url"}}},{"node":{"id":"9ea22a57-02a3-5785-af73-eaabf2a736b4","fields":{"slug":"/httprequest-httpresponse/"},"frontmatter":{"title":"HTTPRequest와 HttpResponse"}}},{"node":{"id":"e3bfa53a-3d48-554e-beb7-4648630c16d0","fields":{"slug":"/form-modelform/"},"frontmatter":{"title":"Django의 Form과 ModelForm"}}},{"node":{"id":"6fb810bb-d784-5bde-8528-947db9b3fd9f","fields":{"slug":"/clean-validators/"},"frontmatter":{"title":"장고 폼의 유효성 검사 : clean과 validators"}}},{"node":{"id":"1f084815-ec52-5f58-a947-ec38e1f5a9f0","fields":{"slug":"/messages/"},"frontmatter":{"title":"Django의 Messages Framework"}}},{"node":{"id":"24b75555-99e9-5cf5-b345-7f02926c7b6d","fields":{"slug":"/CBV-api2/"},"frontmatter":{"title":"CBV api 사용해보기2 : crud"}}},{"node":{"id":"c2a4c8ba-644c-5a2e-a5fb-fefc3d400a11","fields":{"slug":"/serializer/"},"frontmatter":{"title":"REST"}}},{"node":{"id":"71a681c8-2fc0-5652-ba2c-5ad25267c318","fields":{"slug":"/LoginView/"},"frontmatter":{"title":"Django LoginView 사용"}}}]},"previous":{"fields":{"slug":"/steam-block/"},"frontmatter":{"title":"4-2 Stream Cipher와 Block Cipher"}},"next":{"fields":{"slug":"/7-1/"},"frontmatter":{"title":"7-1 DoS attack"}}},"pageContext":{"id":"c2a4c8ba-644c-5a2e-a5fb-fefc3d400a11","series":"askcompany","previousPostId":"d0c7c15f-daf7-51ff-a6a8-bc9aa5dc632a","nextPostId":"3230e19c-884d-5de9-bd84-bd379aec8b3d"}},"staticQueryHashes":[]}