{"componentChunkName":"component---src-templates-post-jsx","path":"/7-2/","result":{"data":{"site":{"siteMetadata":{"title":"hongo"}},"markdownRemark":{"id":"d8cb2c75-c4f1-5607-9036-fdfb429643bd","excerpt":"Combined Threads many to many 커널레벨모드도 유저레벨모드도 존재 유저가 나눠놓은 일의 단위와 cpu가 할당한 주체의 단위를 다르게 가져간다 커널은 사실상 스레드의 존재를 크게 의식하지않음 커널은 단지 유저에게 virtual processor같은. cpu코어같음 커널은 유저가 요청한대로 커널레벨스레드를 만들어주고 커널레벨스레드단위로 …","html":"<h3>Combined Threads</h3>\n<ul>\n<li>many to many</li>\n<li>커널레벨모드도 유저레벨모드도 존재</li>\n<li>유저가 나눠놓은 일의 단위와 cpu가 할당한 주체의 단위를 다르게 가져간다</li>\n<li>커널은 사실상 스레드의 존재를 크게 의식하지않음</li>\n<li>커널은 단지 유저에게 virtual processor같은. cpu코어같음</li>\n<li>커널은 유저가 요청한대로 커널레벨스레드를 만들어주고 커널레벨스레드단위로 스케줄링하고 관리해줌</li>\n<li>유저레벨 스레드는 커널레벨 스레드가 가상의 프로세서라고 생각하고 활용</li>\n<li>어떤 스레드를 어떤 프로세서에 넣을지 관리를 해줌</li>\n<li>사용자 : 자기 자신이 스레드를 만들고 관리</li>\n<li>시스템 : 시스템도 똑같이 만들고 관리</li>\n<li>시스템(커널) 스레드 수의 한계가 존재(1대1로 매핑하면 오버헤드가 커짐)</li>\n<li>유저 레벨 스레드 > 커널 레벨 스레드</li>\n<li>\n<p>유저 레벨 스레드 라이브러리</p>\n<ul>\n<li>유저레벨스레드를 만들고 없앰</li>\n<li>스케줄링 ( 어떤 스레드를 선택할지, 어떤 유저레벨스레드를 커널레벨스레드에 올릴지 )</li>\n<li>컨텍스트를 saving, restore</li>\n<li>스레드간 데이터, 메시지 통신</li>\n</ul>\n</li>\n<li>\n<p>System call API and kernel functions for thread facility</p>\n<ul>\n<li>커널레벨 스레드 중에 어떤걸 cpu에 올릴지라는것만 빼고 다 동일</li>\n</ul>\n</li>\n<li>유저가 스레드를 만듦</li>\n<li>커널에서는 유저 스레드의 양을 보고 적절한 양의 커널 스레드를 만들어서 매핑</li>\n<li>유저레벨 스레드간의 소통, 싱크로나이즈는 유저레벨에서 이루어짐</li>\n<li>사실 요즘 하드웨어는 cpu코어가 적당히 많아서 원투원 사용</li>\n</ul>\n<h2>Thread Libraries</h2>\n<ul>\n<li>Pthread &#x26; OpenMP</li>\n<li>Pthread(Unix 계열의 표준 API)</li>\n<li>OpenMP (c++, c)</li>\n</ul>\n<h3>Pthreads</h3>\n<ul>\n<li>Pthread : POSIX standard for threads</li>\n<li>api만 정의되어있음</li>\n<li>구현은 실제 라이브러리를 만드는 사람마다 다르게 사용할 수 있음</li>\n<li>pthread_create()는 fork()와 비슷한</li>\n<li>pthread_exit = exit()</li>\n<li>pthread_join() = wait</li>\n<li>pthread_yield() : cpu를 양보하겠다는 말. 다른 스레드가 써라!</li>\n</ul>\n<p>pthread_create(&#x26;tid, NULL, runner(수행할 일), argv[1](runner함수의 인자) )</p>\n<p>스레드 attribute</p>\n<p>​\tex. 스케줄러, 폴리시, 프라이어티, stack주소등</p>\n<h2>Implicit Threading</h2>\n<ul>\n<li>explicit threads (명시적으로 스레드 생성, 일 분담) - 어렵다 적당히 시스템이 해줬음좋겠다라는 마음에서 나온게 implicit threading</li>\n<li>스레드 생성, 관리를 컴파일러나 런타임라이브러리가 해줌</li>\n<li>프로그래머는 단지 병렬적으로 일할 수 있는 부분만 알려줌</li>\n<li>사용자수준에서는 훨씬 사용하기쉽다</li>\n</ul>\n<h3>OpenMP</h3>\n<p>컴파일러한테 여기 parallel하게 해줘~하면 알아서 병렬처리 해주는 api와 compiler directives</p>\n<ul>\n<li>\n<h1>pragma omp parallel</h1>\n</li>\n<li>앞에 이 문장만 넣어주면 병렬로 해줌 밑에 나오는 줄을 코어 수만큼 수행. 병렬로 할 수 있는만큼 중복수행해줌</li>\n<li>\n<h1>pragma omp parallel for (num_thread(4))</h1>\n</li>\n<li>for문의 크기를 적당히 쪼개서 병렬로 처리해줌</li>\n<li>num_thread를 통해 thread를 몇 개 쓸건지 정할수도있음</li>\n</ul>\n<h2>Synchronization Tools</h2>\n<p>프로세스들간의 소통이 필요</p>\n<p>data inconsistency를 야기할수도</p>\n<p>a라는 애가 읽으려는 데이터를 b가 읽기전에 바꿔버리면 예측하려는 결과가 안나옴</p>\n<p>counter로 버퍼사이즈를 카운트</p>\n<p>atomic하지않음 - Race Condition - 자원을 공유해서 잘못된 결과를 낳음</p>\n<p>그래서 동기화가 필요!</p>\n<p>프로듀서가 쓸거라고하면 컨슈머가 건들지못하고 컨슈머가 쓸려고하면 프로듀서가 쓰지못하는</p>","frontmatter":{"title":"os 7-2","date":"April 22, 2022","update":null,"tags":["OS"],"series":null},"fields":{"slug":"/7-2/","readingTime":{"minutes":4.89}}},"seriesList":{"edges":[{"node":{"id":"1c0ade67-50d9-566d-8cdf-505bc94e9e30","fields":{"slug":"/1/"},"frontmatter":{"title":"git pull 오류 : fatal: refusing to merge unrelated histories"}}},{"node":{"id":"a18a1199-15b8-567b-b381-9877cb7e1482","fields":{"slug":"/flex/"},"frontmatter":{"title":"flex 해보기 ㅎㅎ"}}},{"node":{"id":"dcd66e70-19bb-529a-93eb-a40dcda3967d","fields":{"slug":"/meta-class/"},"frontmatter":{"title":"Django의 Meta 클래스 활용"}}},{"node":{"id":"9ba353f1-cdcf-5911-a0bd-05ab1ab2c88e","fields":{"slug":"/alpha-beta-pruning/"},"frontmatter":{"title":"Minimax 알고리즘 & alpha-beta 가지치기"}}},{"node":{"id":"7f18986d-bd27-5ec2-9316-919595eca11b","fields":{"slug":"/6-2/"},"frontmatter":{"title":"os 6-2"}}},{"node":{"id":"3dfd35bf-9f06-57e0-8aae-bbe57bac7616","fields":{"slug":"/grid/"},"frontmatter":{"title":"그리드를 어떻게 그리드라"}}},{"node":{"id":"3e388686-2418-5776-a4f4-7d485967ad50","fields":{"slug":"/instance-flex/"},"frontmatter":{"title":"장고하다가 모델 인스턴스 뻥튀기 하고싶을때"}}},{"node":{"id":"35cb486b-c0aa-5492-bf01-368334b4e4d5","fields":{"slug":"/datamining/"},"frontmatter":{"title":"작성중"}}},{"node":{"id":"d8cb2c75-c4f1-5607-9036-fdfb429643bd","fields":{"slug":"/7-2/"},"frontmatter":{"title":"os 7-2"}}},{"node":{"id":"58f895f6-cc6d-51eb-b09a-0eade39b1e41","fields":{"slug":"/8-1/"},"frontmatter":{"title":"os 8-1"}}},{"node":{"id":"5e929406-a010-55f2-8762-1f8c050eaf4c","fields":{"slug":"/7-1/"},"frontmatter":{"title":"os 7-1"}}},{"node":{"id":"3b144405-2ae5-5814-a3eb-f3db08d57801","fields":{"slug":"/auth-user/"},"frontmatter":{"title":"AUTH_USER_MODEL 사용"}}},{"node":{"id":"987ed322-774d-5a43-8f42-1899db096cad","fields":{"slug":"/10-1/"},"frontmatter":{"title":"os 10-1"}}},{"node":{"id":"a8468bab-91a9-5069-bc3f-049d1a5aceb9","fields":{"slug":"/env/"},"frontmatter":{"title":"SECRET KEY 환경변수에 숨기기"}}},{"node":{"id":"7eb19461-ddc3-5b03-ac5a-4fce46553994","fields":{"slug":"/11-1/"},"frontmatter":{"title":"os 11-1"}}},{"node":{"id":"2cebb9b3-24d4-5a97-9261-d7a2757ee845","fields":{"slug":"/11-2/"},"frontmatter":{"title":"os 11-2"}}},{"node":{"id":"8e10d9c5-ccdf-5fb1-9389-4a7d2618115c","fields":{"slug":"/zip/"},"frontmatter":{"title":"zip"}}},{"node":{"id":"641a26c1-7a3f-591a-9294-2b8a329ef9a6","fields":{"slug":"/list-comprehension/"},"frontmatter":{"title":"list comprehension"}}},{"node":{"id":"4692c2dc-2ae0-58ba-92be-fc345d912b43","fields":{"slug":"/requests/"},"frontmatter":{"title":"python 라이브러리 requests"}}},{"node":{"id":"232934ea-695b-59c3-9933-f70434f65675","fields":{"slug":"/access-token/"},"frontmatter":{"title":"git access token ¹ß±Þ"}}},{"node":{"id":"a49c908d-fe72-5ab8-aeca-835d60f50497","fields":{"slug":"/docker-concept/"},"frontmatter":{"title":"docker 개념"}}}]},"previous":{"fields":{"slug":"/4-2/"},"frontmatter":{"title":"4-2"}},"next":{"fields":{"slug":"/8-1/"},"frontmatter":{"title":"os 8-1"}}},"pageContext":{"id":"d8cb2c75-c4f1-5607-9036-fdfb429643bd","series":null,"previousPostId":"3c3d7c71-bf68-593e-9b21-c03bfff45743","nextPostId":"58f895f6-cc6d-51eb-b09a-0eade39b1e41"}},"staticQueryHashes":[]}