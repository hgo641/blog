{"componentChunkName":"component---src-templates-post-jsx","path":"/docker-concept/","result":{"data":{"site":{"siteMetadata":{"title":"hongo"}},"markdownRemark":{"id":"a49c908d-fe72-5ab8-aeca-835d60f50497","excerpt":"docker란  어떤 서비스를 개발할 때 필요한 패키지, 라이브러리들을 다른 서버에서 재설치를 하지않고 충돌없이 사용할 수 있게 해주는 서비스 docker image 리눅스 환경에서 사용가능한 패키지, 라이브러리들을 컴퓨터로 다운받을 수 있게 저장해둔 것 docker component docker image를 가지고 컴퓨터에 생성한 독립적인 작업 공간 를…","html":"<h2>docker란</h2>\n<blockquote>\n<p> 어떤 서비스를 개발할 때 필요한 패키지, 라이브러리들을 다른 서버에서 재설치를 하지않고 충돌없이 사용할 수 있게 해주는 서비스</p>\n</blockquote>\n<h3>docker image</h3>\n<blockquote>\n<p>리눅스 환경에서 사용가능한 패키지, 라이브러리들을 컴퓨터로 다운받을 수 있게 저장해둔 것</p>\n</blockquote>\n<h3>docker component</h3>\n<blockquote>\n<p>docker image를 가지고 컴퓨터에 생성한 독립적인 작업 공간</p>\n</blockquote>\n<p><code class=\"language-text\">docker image</code>를 가지고 여러 개의 <code class=\"language-text\">component</code>를 생성할 수 있다</p>\n<h3>docker volume</h3>\n<blockquote>\n<p>컨테이너와 내 컴퓨터의 특정 폴더를 공유하는걸 의미</p>\n</blockquote>\n<h3>docker compose</h3>\n<blockquote>\n<p>각각의 component들을 하나로 묶음</p>\n</blockquote>\n<h3>간단한 docker 실습</h3>\n<h4>docker 기본 명령어</h4>\n<ul>\n<li>도커 버전 확인</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> -v</code></pre></div>\n<ul>\n<li>도커 이미지 다운만 받기</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> pull <span class=\"token punctuation\">{</span>img_name<span class=\"token punctuation\">}</span>:<span class=\"token punctuation\">{</span>tag<span class=\"token punctuation\">}</span>\n<span class=\"token comment\"># 태그는 필수 요소가 아님</span></code></pre></div>\n<ul>\n<li>컴퓨터 내 도커 이미지들 보기</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> images</code></pre></div>\n<ul>\n<li>이미지로 컨테이너 생성하기</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> create <span class=\"token punctuation\">{</span>option<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span>img_name<span class=\"token punctuation\">}</span>:<span class=\"token punctuation\">{</span>tag<span class=\"token punctuation\">}</span>\n<span class=\"token comment\"># ex) docker crate -it python</span></code></pre></div>\n<ul>\n<li>만들어진 컨테이너 시작하기 (이미지에 CMD로 지정해놓은 작업 시키기)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> start <span class=\"token punctuation\">{</span>container_id or name<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>컨테이너로 들어가기 (컨테이너 내 CLI 이용하기)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> attach <span class=\"token punctuation\">{</span>container_id or name<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>(해당 이미지가 없다면) 이미지를 다운받아 바로 컨테이너 실행하여 진입하기</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run <span class=\"token punctuation\">{</span>img_name<span class=\"token punctuation\">}</span>:<span class=\"token punctuation\">{</span>tag<span class=\"token punctuation\">}</span>\n<span class=\"token comment\"># ex) docker -it run python:3</span>\n<span class=\"token comment\"># pull, create, start, attach를 한 번에 실행하는 것과 같다</span></code></pre></div>\n<table>\n<thead>\n<tr>\n<th align=\"left\">옵션</th>\n<th>설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">-d</td>\n<td>데몬으로 실행(백그라운드에서 알아서 돌라고 하기)</td>\n</tr>\n<tr>\n<td align=\"left\">-it</td>\n<td>컨테이너로 들어갔을 때 bash로 CLI 입출력을 사용할 수 있도록 해줌</td>\n</tr>\n<tr>\n<td align=\"left\">--name {container_name}</td>\n<td>컨테이너 이름 지정</td>\n</tr>\n<tr>\n<td align=\"left\">-p {port of host}:{port of container}</td>\n<td>호스트와 컨테이너의 포트를 연결</td>\n</tr>\n<tr>\n<td align=\"left\">--rm</td>\n<td>컨테이너가 종료되면 컨테이너 제거</td>\n</tr>\n<tr>\n<td align=\"left\">-v {dir of host}:{dir of container}</td>\n<td>호스트와 컨테이너의 디렉토리를 연결</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>동작중인 컨테이너 재시작</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> restart <span class=\"token punctuation\">{</span>container_id or name<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>도커 컨테이너 내부 쉘에서 빠져나오기 (컨테이너를 종료)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">exit</span>\n<span class=\"token comment\"># 또는  ctrl + d</span></code></pre></div>\n<ul>\n<li>\n<p>도커 컨테이너 내부 쉘에서 빠져나오기 (컨테이너를 종료하지 않음)</p>\n<ul>\n<li>ctrl + P + Q</li>\n</ul>\n</li>\n<li>동작중인 컨테이너 목록보기</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> <span class=\"token function\">ps</span>\n<span class=\"token comment\"># 동작하지않는 컨테이너까지 모두 보려면 docker ps -a</span></code></pre></div>\n<ul>\n<li>컨테이너 삭제</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> <span class=\"token function\">rm</span> <span class=\"token punctuation\">{</span>container_id or name<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\"># 모든 컨테이너 삭제</span>\n<span class=\"token comment\"># docker rm `docker ps -a -q`</span></code></pre></div>\n<ul>\n<li>이미지 삭제</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> <span class=\"token function\">rm</span> <span class=\"token punctuation\">{</span>option<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span>img_id<span class=\"token punctuation\">}</span>\n<span class=\"token comment\"># 컨테이너가 있을시 강제 삭제 : 옵션 -f 사용</span></code></pre></div>\n<ul>\n<li>모든 컨테이너와 이미지 등 도커 요소 중지 및 삭제</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># 모든 컨테이너 중지</span>\n<span class=\"token function\">docker</span> stop <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">docker</span> <span class=\"token function\">ps</span> -aq<span class=\"token variable\">)</span></span>\n\n<span class=\"token comment\"># 사용되지 않는 모든 도커 요소(컨테이너, 이미지, 네트워크, 볼륨 등) 삭제</span>\n<span class=\"token function\">docker</span> system prune -a</code></pre></div>\n<ul>\n<li>도커 파일로 이미지 생성</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># Dockerfile 파일이 있는 디렉토리 기준.  마지막의 . 이 상대주소</span>\n<span class=\"token function\">docker</span> build -t <span class=\"token punctuation\">{</span>이미지명<span class=\"token punctuation\">}</span> <span class=\"token builtin class-name\">.</span></code></pre></div>\n<ul>\n<li>도커 컴포즈 실행</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># docker-compose 파일이 있는 디렉토리 기준</span>\n<span class=\"token function\">docker-compose</span> up\n<span class=\"token comment\"># 백그라운드에서 데몬으로 돌게 하려면 옵션 -d를 붙임</span></code></pre></div>\n<h4>Dockerfile</h4>","frontmatter":{"title":"docker 개념","date":"May 17, 2022","update":null,"tags":["docker"],"series":null},"fields":{"slug":"/docker-concept/","readingTime":{"minutes":4.275}}},"seriesList":{"edges":[{"node":{"id":"1c0ade67-50d9-566d-8cdf-505bc94e9e30","fields":{"slug":"/1/"},"frontmatter":{"title":"git pull 오류 : fatal: refusing to merge unrelated histories"}}},{"node":{"id":"a18a1199-15b8-567b-b381-9877cb7e1482","fields":{"slug":"/flex/"},"frontmatter":{"title":"flex 해보기 ㅎㅎ"}}},{"node":{"id":"dcd66e70-19bb-529a-93eb-a40dcda3967d","fields":{"slug":"/meta-class/"},"frontmatter":{"title":"Django의 Meta 클래스 활용"}}},{"node":{"id":"9ba353f1-cdcf-5911-a0bd-05ab1ab2c88e","fields":{"slug":"/alpha-beta-pruning/"},"frontmatter":{"title":"Minimax 알고리즘 & alpha-beta 가지치기"}}},{"node":{"id":"7f18986d-bd27-5ec2-9316-919595eca11b","fields":{"slug":"/6-2/"},"frontmatter":{"title":"os 6-2"}}},{"node":{"id":"3dfd35bf-9f06-57e0-8aae-bbe57bac7616","fields":{"slug":"/grid/"},"frontmatter":{"title":"그리드를 어떻게 그리드라"}}},{"node":{"id":"3e388686-2418-5776-a4f4-7d485967ad50","fields":{"slug":"/instance-flex/"},"frontmatter":{"title":"장고하다가 모델 인스턴스 뻥튀기 하고싶을때"}}},{"node":{"id":"35cb486b-c0aa-5492-bf01-368334b4e4d5","fields":{"slug":"/datamining/"},"frontmatter":{"title":"작성중"}}},{"node":{"id":"d8cb2c75-c4f1-5607-9036-fdfb429643bd","fields":{"slug":"/7-2/"},"frontmatter":{"title":"os 7-2"}}},{"node":{"id":"58f895f6-cc6d-51eb-b09a-0eade39b1e41","fields":{"slug":"/8-1/"},"frontmatter":{"title":"os 8-1"}}},{"node":{"id":"5e929406-a010-55f2-8762-1f8c050eaf4c","fields":{"slug":"/7-1/"},"frontmatter":{"title":"os 7-1"}}},{"node":{"id":"3b144405-2ae5-5814-a3eb-f3db08d57801","fields":{"slug":"/auth-user/"},"frontmatter":{"title":"AUTH_USER_MODEL 사용"}}},{"node":{"id":"987ed322-774d-5a43-8f42-1899db096cad","fields":{"slug":"/10-1/"},"frontmatter":{"title":"os 10-1"}}},{"node":{"id":"a8468bab-91a9-5069-bc3f-049d1a5aceb9","fields":{"slug":"/env/"},"frontmatter":{"title":"SECRET KEY 환경변수에 숨기기"}}},{"node":{"id":"7eb19461-ddc3-5b03-ac5a-4fce46553994","fields":{"slug":"/11-1/"},"frontmatter":{"title":"os 11-1"}}},{"node":{"id":"2cebb9b3-24d4-5a97-9261-d7a2757ee845","fields":{"slug":"/11-2/"},"frontmatter":{"title":"os 11-2"}}},{"node":{"id":"8e10d9c5-ccdf-5fb1-9389-4a7d2618115c","fields":{"slug":"/zip/"},"frontmatter":{"title":"zip"}}},{"node":{"id":"641a26c1-7a3f-591a-9294-2b8a329ef9a6","fields":{"slug":"/list-comprehension/"},"frontmatter":{"title":"list comprehension"}}},{"node":{"id":"4692c2dc-2ae0-58ba-92be-fc345d912b43","fields":{"slug":"/requests/"},"frontmatter":{"title":"python 라이브러리 requests"}}},{"node":{"id":"232934ea-695b-59c3-9933-f70434f65675","fields":{"slug":"/access-token/"},"frontmatter":{"title":"git access token ¹ß±Þ"}}},{"node":{"id":"a49c908d-fe72-5ab8-aeca-835d60f50497","fields":{"slug":"/docker-concept/"},"frontmatter":{"title":"docker 개념"}}}]},"previous":{"fields":{"slug":"/viewset-url/"},"frontmatter":{"title":"viewset url 등록"}},"next":{"fields":{"slug":"/mod-concept/"},"frontmatter":{"title":"멋쟁이사자처럼 X 넥슨 MOD Suppoters Hackathon 1주차 회고"}}},"pageContext":{"id":"a49c908d-fe72-5ab8-aeca-835d60f50497","series":null,"previousPostId":"602f777d-6f5e-5b87-a8b8-3048d40b52cb","nextPostId":"4fea1736-910e-575e-bb8c-c720e8b3f91d"}},"staticQueryHashes":[]}