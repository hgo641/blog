{"componentChunkName":"component---src-templates-post-jsx","path":"/11-1/","result":{"data":{"site":{"siteMetadata":{"title":"hongo"}},"markdownRemark":{"id":"85ca9819-7740-5d19-bde1-f1825944fb23","excerpt":"Dining-Philosophers Problem 원형 테이블에서 식사하는 철학자 철학자는 thinking하거나 eating 두 가지 상태 존재 각 철학자들은 밥을 먹어야할 때만 소통 두 명이 젓가락 한 개씩 공유 옆에 있는 젓가락만 사용가능 ( i번째 사람은 i또는 i+1만) 공유데이터 밥 (data set) Semaphore chapstic 5 sem…","html":"<h2>Dining-Philosophers Problem</h2>\n<blockquote>\n<p>원형 테이블에서 식사하는 철학자</p>\n<ul>\n<li>철학자는 thinking하거나 eating 두 가지 상태 존재</li>\n<li>각 철학자들은 밥을 먹어야할 때만 소통</li>\n</ul>\n<p>두 명이 젓가락 한 개씩 공유</p>\n<ul>\n<li>옆에 있는 젓가락만 사용가능 ( i번째 사람은 i또는 i+1만)</li>\n</ul>\n<p>공유데이터</p>\n<ul>\n<li>밥 (data set)</li>\n<li>Semaphore chapstic [5]</li>\n</ul>\n</blockquote>\n<ul>\n<li>semaphore chapstic[5]; # binary semaphore(=mutex lock) 1or0</li>\n<li>signal() # release 밥을 다 먹음</li>\n<li>데드락 문제 발생 가능!!</li>\n</ul>\n<h2>Deadlock</h2>\n<p>내가 원하는 자원을 상대방이 점유하고있어서 다음으로 넘어갈 수 없음</p>\n<p>ex. 모든 사람들이 다 자신의 왼쪽에 있는 젓가락 한 짝을 소유중</p>\n<p>모두가 계속 기다림... </p>\n<ul>\n<li>wait( chopstic[ (i+1) % 5] ) &#x3C;- 여기서 다들 기다리게됨</li>\n</ul>\n<br/>\n<h3>해결방안 1</h3>\n<p>다섯명의 철학자가 있지만 책상에 앉을 수 있는 사람을 4명으로 제한</p>\n<ul>\n<li>적어도 한 명은 젓가락 한 쌍을 얻을 수 있다</li>\n</ul>\n<br/>\n<h3>해결방안 2</h3>\n<p>젓가락 두 개가 동시에 사용 가능할때만 젓가락을 집게한다</p>\n<ul>\n<li>두 줄의 코드가 atomic하게</li>\n<li>크리티컬 섹션으로. 내가 젓가락을 집을 때 다른 사람이 집을 수 없음</li>\n</ul>\n<p>-> 모니터를 사용해서 구현</p>\n<p>state hungry 추가</p>\n<ul>\n<li>thinking</li>\n<li>hungry</li>\n<li>eating : 두 이웃이 젓가락을 안쓰고있을때만 eating 가능</li>\n<li>\n<p>모니터 안에는 condition self가 존재</p>\n<ul>\n<li>condition == semaphore + waiting queue + wait(), signal() 함수를 제공하는 하나의 자료형</li>\n<li>여기서의 Semaphore는 자원이라기보단 스케줄링을 위한 수단이라고 보는게 좋음 </li>\n</ul>\n</li>\n</ul>\n<h4>코드</h4>\n<p>pickup() : 젓가락 획득 시도</p>\n<ul>\n<li>self[i].wait - i번째 사람이 밥을 먹을 수 없는 상태라면 대기</li>\n<li>양쪽 사람들 중 누군가가 밥을 다 먹고 젓가락을 내려놓을때 먹을 수 있음</li>\n</ul>\n<p>test() :  양쪽 사람이 안먹고있는지 체크</p>\n<ul>\n<li>내가 배고픈데 &#x26; 왼쪽 사람이 밥 안먹고있고 &#x26; 오른쪽 사람이 밥을 안먹고있는가</li>\n<li>self[i].signal() - i번째 사람 밥먹으라고 신호</li>\n</ul>\n<p>putdown() : 젓가락 반환</p>\n<ul>\n<li>test : i번째는 밥을 다 먹었으니 양 옆에 사람들이 밥 먹을 수 있는지 테스트</li>\n<li>test했는데 hungry면 기다리고 있었던 것. 걔 self[i].signal()로 밥먹게함</li>\n</ul>\n<p>initialization_code() : state 초기화 </p>\n<blockquote>\n<p>No deadlock, but starvation is possible</p>\n<p>데드락은 해결됐지만 누가 계속 밥을 먹으면 누군가는 굶주려야함</p>\n</blockquote>\n<br/>\n<h3>해결방안 3</h3>\n<p>asymmetric한 구조를 만든다 (i -> i+1순으로 잡는데 만약 전체 인원의 반이 i+1->i순으로 젓가락을 집는다면?)</p>\n<p>wait(i+1)</p>\n<p>wait(i)</p>\n<p>순으로 하게 변경</p>\n<p>모두가 동시에 왼쪽 젓가락을 집지않는다</p>\n<h2>Deadlock</h2>\n<p>어떤 프로세스가 다른 프로세스가 지닌 무언가를 얻기 위해 기다리고있는데 상대 프로세스도 무언가를 기다리는 중이라서 관련된 모든 프로세스들이 전부 기다려야하는 상황</p>\n<h3>System Model</h3>\n<p>m개의 리소스 종류, R</p>\n<ul>\n<li>리소스는 꼭 공유변수여야하는건 아니고 cpu 사이클일수도있고 메모리 공간일수도 있고 i/o 디바이스...</li>\n<li>\n<p>각각의 프로세스는 세 가지 경우가 있다</p>\n<ul>\n<li>request</li>\n<li>use</li>\n<li>release</li>\n</ul>\n</li>\n<li>\n<p>각각의 리소스 R은 리소스 총량 W가 있다</p>\n<ul>\n<li>리소스 R이 W개 있다</li>\n</ul>\n</li>\n</ul>\n<h3>데드락 친구들</h3>\n<ul>\n<li>Deadlock - 서로가 상대방의 자원을 요구하면서 기다리는 상태</li>\n<li>Livelock - 락의 획득/해제가 무한히 반복되는 상태 : 데드락을 방지하는 코드에서 발생할수도있음</li>\n<li>Indefinite Postponement - 일어나지 않을 일을 기다리는 중이라 무한하게 대기중인 상태</li>\n</ul>\n<h3>데드락의 조건</h3>\n<ul>\n<li>\n<p>Mutual exclusion</p>\n<ul>\n<li>한 명이 리소스를 차지하고있으면 다른 사람이 리소스를 동시에 차지할 수 없다</li>\n</ul>\n</li>\n<li>\n<p>No preemption</p>\n<ul>\n<li>한 번 자원을 얻으면 할 일이 끝날 때까지 자원을 양보하지않는다</li>\n</ul>\n</li>\n<li>\n<p>Hold and wait</p>\n<ul>\n<li>한 프로세스가 적어도 하나 이상의 리소스를 가지고 있고 다른 리소스를 원하는 상태, 그러나 그 다른 리소스는 또 다른 프로세스가 가지고있음</li>\n</ul>\n</li>\n<li>\n<p>Circular wait</p>\n<ul>\n<li>원을 그리면서 서로가 서로의 것을 원하는... 상태</li>\n</ul>\n</li>\n</ul>\n<h3>데드락 방지</h3>\n<p>위 조건 중 하나라도 만족하지않으면 문제가 생기지않음</p>\n<ul>\n<li>\n<p>no mutual exclusion</p>\n<ul>\n<li>여러명이 동시에 같은 자원 사용이 가능하게</li>\n<li>현실적으로 불가능 ㅎㅎ;</li>\n<li>리소스의 특성 자체를 바꾸는 일</li>\n</ul>\n</li>\n<li>\n<p>no preemption</p>\n<ul>\n<li>양보 가능한</li>\n<li>라이브락 가능성 존재</li>\n<li>그러나 새로운 것도 획득 가능 할때 다시 기존 것도 얻게하면 라이브락 방지가 가능할 것!</li>\n</ul>\n</li>\n<li>\n<p>no hold and wait</p>\n<ul>\n<li>리소스를 순차적을 얻지 않고 한 번에 얻거나 한 번에 기다린다</li>\n<li>프로세스가 어느 시점에 어떤 리소스를 원할지 예측하는게 어려움, 구현 복잡;;</li>\n<li>리소스 낭비가 심해질수있음 (쓸지안쓸진 모르지만 일단 다 받아놓자~ )</li>\n<li>starvation 가능 - 한 명이 리소스 독식</li>\n</ul>\n</li>\n<li>\n<p>no circular wait</p>\n<ul>\n<li>서큘러가 될 거 같으면 연결 고리가 끊어질때까지 대기</li>\n</ul>\n</li>\n</ul>\n<h2>Resource-Allocation Graph</h2>\n<p>각 프로세스가 자원을 어떻게 활용하고 있는지 나타낸 그래프</p>\n<p>4개 - 최대 4개의 프로세스가 사용가능</p>\n<ul>\n<li>\n<p>circular wait이 있다면 데드락 가능성 존재</p>\n<ul>\n<li>완전히 닫힌 싸이클</li>\n</ul>\n</li>\n<li>예시1은 데드락</li>\n<li>\n<p>예시 2는 싸이클이지만 데드락 아님</p>\n<ul>\n<li>p2 p4는 개별적을 동작 가능</li>\n<li>뭘 기다리고있지않음</li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"os 11-1","date":"May 09, 2022","update":null,"tags":["OS"],"series":null},"fields":{"slug":"/11-1/","readingTime":{"minutes":7.46}}},"seriesList":{"edges":[{"node":{"id":"1f4e5238-73be-5807-a94c-f4de69b70d29","fields":{"slug":"/git1/"},"frontmatter":{"title":"git pull 오류 : fatal: refusing to merge unrelated histories"}}},{"node":{"id":"a18a1199-15b8-567b-b381-9877cb7e1482","fields":{"slug":"/flex/"},"frontmatter":{"title":"flex 해보기 ㅎㅎ"}}},{"node":{"id":"dcd66e70-19bb-529a-93eb-a40dcda3967d","fields":{"slug":"/meta-class/"},"frontmatter":{"title":"Django의 Meta 클래스 활용"}}},{"node":{"id":"9ba353f1-cdcf-5911-a0bd-05ab1ab2c88e","fields":{"slug":"/alpha-beta-pruning/"},"frontmatter":{"title":"Minimax 알고리즘 & alpha-beta 가지치기"}}},{"node":{"id":"7f18986d-bd27-5ec2-9316-919595eca11b","fields":{"slug":"/6-2/"},"frontmatter":{"title":"os 6-2"}}},{"node":{"id":"3dfd35bf-9f06-57e0-8aae-bbe57bac7616","fields":{"slug":"/grid/"},"frontmatter":{"title":"그리드를 어떻게 그리드라"}}},{"node":{"id":"3e388686-2418-5776-a4f4-7d485967ad50","fields":{"slug":"/instance-flex/"},"frontmatter":{"title":"장고하다가 모델 인스턴스 뻥튀기 하고싶을때"}}},{"node":{"id":"35cb486b-c0aa-5492-bf01-368334b4e4d5","fields":{"slug":"/datamining/"},"frontmatter":{"title":"작성중"}}},{"node":{"id":"5e929406-a010-55f2-8762-1f8c050eaf4c","fields":{"slug":"/7-1/"},"frontmatter":{"title":"os 7-1"}}},{"node":{"id":"58f895f6-cc6d-51eb-b09a-0eade39b1e41","fields":{"slug":"/8-1/"},"frontmatter":{"title":"os 8-1"}}},{"node":{"id":"d8cb2c75-c4f1-5607-9036-fdfb429643bd","fields":{"slug":"/7-2/"},"frontmatter":{"title":"os 7-2"}}},{"node":{"id":"3b144405-2ae5-5814-a3eb-f3db08d57801","fields":{"slug":"/auth-user/"},"frontmatter":{"title":"AUTH_USER_MODEL 사용"}}},{"node":{"id":"a1a1c386-4e12-55c0-b88e-b1ab29cfc979","fields":{"slug":"/sync-tools/"},"frontmatter":{"title":"os 10-1 Synchronization Tools"}}},{"node":{"id":"a8468bab-91a9-5069-bc3f-049d1a5aceb9","fields":{"slug":"/env/"},"frontmatter":{"title":"SECRET KEY 환경변수에 숨기기"}}},{"node":{"id":"85ca9819-7740-5d19-bde1-f1825944fb23","fields":{"slug":"/11-1/"},"frontmatter":{"title":"os 11-1"}}},{"node":{"id":"fe1864b8-839f-505a-8647-10db01ebd21a","fields":{"slug":"/11-2/"},"frontmatter":{"title":"os 11-2"}}},{"node":{"id":"641a26c1-7a3f-591a-9294-2b8a329ef9a6","fields":{"slug":"/list-comprehension/"},"frontmatter":{"title":"list comprehension"}}},{"node":{"id":"8e10d9c5-ccdf-5fb1-9389-4a7d2618115c","fields":{"slug":"/zip/"},"frontmatter":{"title":"zip"}}},{"node":{"id":"232934ea-695b-59c3-9933-f70434f65675","fields":{"slug":"/access-token/"},"frontmatter":{"title":"git access token 발급 잔디 테스트"}}},{"node":{"id":"4692c2dc-2ae0-58ba-92be-fc345d912b43","fields":{"slug":"/requests/"},"frontmatter":{"title":"python 라이브러리 requests"}}},{"node":{"id":"a49c908d-fe72-5ab8-aeca-835d60f50497","fields":{"slug":"/docker-concept/"},"frontmatter":{"title":"docker 개념"}}},{"node":{"id":"756b4f22-d300-58fe-8d33-fafc6ff511f6","fields":{"slug":"/docker-env/"},"frontmatter":{"title":"docker env설정(작성중ㅎㅎ)"}}},{"node":{"id":"d6ccffc2-7b03-5581-b29a-ac306dc06194","fields":{"slug":"/jupyter-setting/"},"frontmatter":{"title":"장고 shell 명령 주피터에서 할 때 초기세팅"}}},{"node":{"id":"254cabc8-767a-509a-8ac6-1b7c1fee5877","fields":{"slug":"/install-openssl/"},"frontmatter":{"title":"ubuntu에서 openssl 설치하기"}}},{"node":{"id":"7b7a0020-f454-5945-885b-8972512e0d8e","fields":{"slug":"/ssl-concept/"},"frontmatter":{"title":"ssl 인증서란?"}}},{"node":{"id":"9bf2c6c3-9f60-5a55-98d1-e060211c8163","fields":{"slug":"/sync-exam/"},"frontmatter":{"title":"os 10-2 Synchronization Examples"}}},{"node":{"id":"910aa000-d355-501d-a941-b234944b4fec","fields":{"slug":"/bash/"},"frontmatter":{"title":"bash: vi: command not found"}}},{"node":{"id":"4bec6f60-3a0e-5050-b6c4-1a9d7a232ba4","fields":{"slug":"/1/"},"frontmatter":{"title":"os 13-1"}}},{"node":{"id":"02483ae7-ba0a-5e03-aa72-19a907837984","fields":{"slug":"/2/"},"frontmatter":{"title":"os 13-2"}}},{"node":{"id":"ce978a60-290f-5fbb-b75d-f9ec9e6f57e2","fields":{"slug":"/1/"},"frontmatter":{"title":"os 12-1"}}},{"node":{"id":"bfc80393-1cd7-5fc8-bc04-e744783e77de","fields":{"slug":"/2/"},"frontmatter":{"title":"os 12-2"}}},{"node":{"id":"e41df5b8-30c6-54fe-88c9-1d212c70c9f4","fields":{"slug":"/15/"},"frontmatter":{"title":"os 14-2"}}},{"node":{"id":"a8eb5fd5-89bd-592a-bbbd-81ff257715b2","fields":{"slug":"/1/"},"frontmatter":{"title":"os 14-1"}}},{"node":{"id":"d86a8175-8ed2-572f-9679-d8d2a48d0697","fields":{"slug":"/2/"},"frontmatter":{"title":"os 14-2"}}},{"node":{"id":"b2e15c0a-3e85-5d09-bb9a-930a3af8456a","fields":{"slug":"/kr-str/"},"frontmatter":{"title":"[c++] 한글을 한 글자씩 출력하기"}}},{"node":{"id":"ad012487-5365-57df-8a83-b70be15aa316","fields":{"slug":"/arr-addr/"},"frontmatter":{"title":"arr과 &arr의 차이"}}},{"node":{"id":"5063006c-e0ec-58ad-bbd0-0e5f2ab7ad99","fields":{"slug":"/git2/"},"frontmatter":{"title":"git error: cannot lock ref 'refs/remotes/origin/main': unable to resolve reference 'refs/remotes/origin/main': reference broken 문제 해결"}}}]},"previous":{"fields":{"slug":"/env/"},"frontmatter":{"title":"SECRET KEY 환경변수에 숨기기"}},"next":{"fields":{"slug":"/11-2/"},"frontmatter":{"title":"os 11-2"}}},"pageContext":{"id":"85ca9819-7740-5d19-bde1-f1825944fb23","series":null,"previousPostId":"a8468bab-91a9-5069-bc3f-049d1a5aceb9","nextPostId":"fe1864b8-839f-505a-8647-10db01ebd21a"}},"staticQueryHashes":[]}