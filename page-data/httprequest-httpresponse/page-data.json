{"componentChunkName":"component---src-templates-post-jsx","path":"/httprequest-httpresponse/","result":{"data":{"site":{"siteMetadata":{"title":"hongo"}},"markdownRemark":{"id":"9ea22a57-02a3-5785-af73-eaabf2a736b4","excerpt":"HttpRequest를 받아 HttpResponse로 응답한다 HttpRequest 객체 **클라이언트로부터의 모든 요청 내용을 담고 있으며 ** 함수 기반 뷰 : 매 요청시마다 뷰 함수의 첫번째 인자 로 전달 클래스 기반 뷰 : 매 요청시마다 를 통해 접근 패킷 헤더 : get data는 헤더에만 필요한 정보가 있음. 바디 사용 x 공백 바디 : pos…","html":"<p><strong>HttpRequest를 받아 HttpResponse로 응답한다</strong></p>\n<h2>HttpRequest 객체</h2>\n<hr>\n<p>**클라이언트로부터의 모든 요청 내용을 담고 있으며 **</p>\n<p>함수 기반 뷰 : 매 요청시마다 뷰 함수의 첫번째 인자 <code class=\"language-text\">request</code>로 전달</p>\n<p>클래스 기반 뷰 : 매 요청시마다 <code class=\"language-text\">self.request</code>를 통해 접근</p>\n<p>패킷</p>\n<p>[헤더 : get data는 헤더에만 필요한 정보가 있음. 바디 사용 x]</p>\n<p>공백</p>\n<p>[바디 : post 관련 data]</p>\n<h3>Form 처리 관련 속성들</h3>\n<hr>\n<p>request. ( )</p>\n<p>.method : 요청의 종류 \"GET\" 또는 \"POST\"</p>\n<p>.GET : GET 인자 목록 (QueryDict 타입)</p>\n<p>.POST : POST 인자 목록 (QueryDict 타입)</p>\n<p>.FILES : POST 인자 중에서 파일 목록 (MultiValueDict 타입)</p>\n<h3>MultiValueDict</h3>\n<hr>\n<blockquote>\n<p>dict을 상속받은 클래스</p>\n<p>동일 key의 다수 value를 지원하는 사전</p>\n</blockquote>\n<p>http 요청에서는 하나의 key에 대해서 여러 값을 전달받을 수 있어야 함.</p>\n<p>URL의 QueryString같은 Key로서 다수 Value지정을 지원</p>\n<p>ex) name=TOM&#x26;name=Steve&#x26;name=Hongo</p>\n<h2>HttpResponse</h2>\n<hr>\n<p>어떠한 뷰 함수에 응답 반환값은 무조건 HttpResponse임</p>\n<p>(미들웨어 이미지 캡처)</p>\n<h2>JsonResponse</h2>\n<hr>\n<p><code class=\"language-text\">HttpResponse</code>를 상속받아서 사용 가능</p>\n<p>직렬화 : Json 객체를 문자열로 변환</p>\n<p>장고에는 <code class=\"language-text\">Django JSONEncoder</code>라는게 존재.</p>\n<p>파이썬의 json.JsonEncoder를 상속받아서 DJango 만의 특징에 맞게 변환</p>\n<h2>StreamingHttpResponse</h2>\n<hr>\n<p>효율적인 큰 응답을 위함. &#x26; 메모리를 많이 먹는 응답</p>\n<p>but Django는 short-lived 요청에 맞게 디자인!</p>\n<p>​ 큰 응답시에는 극심한 성능 저하로 이어질 수 있음</p>\n<p>​ : 이럴 때는 별도의 웹 서버등 다른 서비스를 이용하는게 좋음</p>\n<h2>FileResponse</h2>\n<hr>\n<p><code class=\"language-text\">StreamingHttpResponse</code>를 상속받음<br>\n파일 내용 응답에 최적화\nContent-Length, Content-Type, Content-Disposion 헤더 자동 지정<br>\nContent-Disposion : 파일 다운로드 다이로그</p>\n<p>인자인 <code class=\"language-text\">as_attachment</code>를 True로 주면 Content-Disposion 헤더 지정</p>","frontmatter":{"title":"HTTPRequest와 HttpResponse","date":"April 12, 2022","update":null,"tags":["django","askcompany"],"series":"askcompany"},"fields":{"slug":"/httprequest-httpresponse/","readingTime":{"minutes":2.295}}},"seriesList":{"edges":[{"node":{"id":"8c418e59-f9a5-5fdb-8f42-e3dff2ff08a9","fields":{"slug":"/django-ORM/"},"frontmatter":{"title":"django ORM"}}},{"node":{"id":"3fab5510-8f86-511d-b0a7-6031ea7f95f8","fields":{"slug":"/rest/"},"frontmatter":{"title":"REST"}}},{"node":{"id":"e41b821c-ba53-5e84-a1ae-c7c4cba634b5","fields":{"slug":"/static-media/"},"frontmatter":{"title":"django의 Static & Media 파일"}}},{"node":{"id":"32500d0b-16dd-5e7c-a16c-b45dd8cf9f0c","fields":{"slug":"/django-admin/"},"frontmatter":{"title":"django ORM"}}},{"node":{"id":"c52011a6-a94e-5aa8-9612-9c3a352654e9","fields":{"slug":"/json/"},"frontmatter":{"title":"작성중 : json 응답뷰 만들기"}}},{"node":{"id":"97fa8fe6-4603-5a9f-b2f0-c32be0c80118","fields":{"slug":"/view-decorators/"},"frontmatter":{"title":"decorator를 사용해서 Django view 꾸며보기"}}},{"node":{"id":"125af04d-f31e-5dd0-8176-39fec9d54510","fields":{"slug":"/CBV-api/"},"frontmatter":{"title":"CBV api 사용해보기"}}},{"node":{"id":"34e238b9-dd92-5457-846a-8b6d13e76798","fields":{"slug":"/queryset/"},"frontmatter":{"title":"작성중 : 쓸만해보이는 쿼리셋팁"}}},{"node":{"id":"cdf383e6-f2a6-5939-8887-e7501d318084","fields":{"slug":"/http-status-code/"},"frontmatter":{"title":"HTTP 상태 코드"}}},{"node":{"id":"8f38a40f-0d0e-5e23-9922-b0286f3b8a2b","fields":{"slug":"/get-absolute-url/"},"frontmatter":{"title":"detail url을 간단하게 하고싶다면, get_absolute_url"}}},{"node":{"id":"9ea22a57-02a3-5785-af73-eaabf2a736b4","fields":{"slug":"/httprequest-httpresponse/"},"frontmatter":{"title":"HTTPRequest와 HttpResponse"}}},{"node":{"id":"e3bfa53a-3d48-554e-beb7-4648630c16d0","fields":{"slug":"/form-modelform/"},"frontmatter":{"title":"Django의 Form과 ModelForm"}}},{"node":{"id":"6fb810bb-d784-5bde-8528-947db9b3fd9f","fields":{"slug":"/clean-validators/"},"frontmatter":{"title":"장고 폼의 유효성 검사 : clean과 validators"}}},{"node":{"id":"1f084815-ec52-5f58-a947-ec38e1f5a9f0","fields":{"slug":"/messages/"},"frontmatter":{"title":"Django의 Messages Framework"}}},{"node":{"id":"24b75555-99e9-5cf5-b345-7f02926c7b6d","fields":{"slug":"/CBV-api2/"},"frontmatter":{"title":"CBV api 사용해보기2 : crud"}}},{"node":{"id":"c2a4c8ba-644c-5a2e-a5fb-fefc3d400a11","fields":{"slug":"/serializer/"},"frontmatter":{"title":"REST"}}},{"node":{"id":"71a681c8-2fc0-5652-ba2c-5ad25267c318","fields":{"slug":"/LoginView/"},"frontmatter":{"title":"Django LoginView 사용"}}}]},"previous":{"fields":{"slug":"/get-absolute-url/"},"frontmatter":{"title":"detail url을 간단하게 하고싶다면, get_absolute_url"}},"next":{"fields":{"slug":"/form-modelform/"},"frontmatter":{"title":"Django의 Form과 ModelForm"}}},"pageContext":{"id":"9ea22a57-02a3-5785-af73-eaabf2a736b4","series":"askcompany","previousPostId":"8f38a40f-0d0e-5e23-9922-b0286f3b8a2b","nextPostId":"e3bfa53a-3d48-554e-beb7-4648630c16d0"}},"staticQueryHashes":[]}