{"componentChunkName":"component---src-templates-post-jsx","path":"/httprequest-httpresponse/","result":{"data":{"site":{"siteMetadata":{"title":"hongo"}},"markdownRemark":{"id":"cf0a3ceb-264d-527d-a369-8477a225e7cb","excerpt":"HttpRequest를 받아 HttpResponse로 응답한다 HttpRequest 객체 **클라이언트로부터의 모든 요청 내용을 담고 있으며 ** 함수 기반 뷰 : 매 요청시마다 뷰 함수의 첫번째 인자 로 전달 클래스 기반 뷰 : 매 요청시마다 를 통해 접근 패킷 헤더 : get data는 헤더에만 필요한 정보가 있음. 바디 사용 x 공백 바디 : pos…","html":"<p><strong>HttpRequest를 받아 HttpResponse로 응답한다</strong></p>\n<h2>HttpRequest 객체</h2>\n<hr>\n<p>**클라이언트로부터의 모든 요청 내용을 담고 있으며 **</p>\n<p>함수 기반 뷰 : 매 요청시마다 뷰 함수의 첫번째 인자 <code class=\"language-text\">request</code>로 전달</p>\n<p>클래스 기반 뷰 : 매 요청시마다 <code class=\"language-text\">self.request</code>를 통해 접근</p>\n<p>패킷</p>\n<p>[헤더 : get data는 헤더에만 필요한 정보가 있음. 바디 사용 x]</p>\n<p>공백</p>\n<p>[바디 : post 관련 data]</p>\n<h3>Form 처리 관련 속성들</h3>\n<hr>\n<p>request. ( )</p>\n<p>.method : 요청의 종류 \"GET\" 또는 \"POST\"</p>\n<p>.GET : GET 인자 목록 (QueryDict 타입)</p>\n<p>.POST : POST 인자 목록 (QueryDict 타입)</p>\n<p>.FILES : POST 인자 중에서 파일 목록 (MultiValueDict 타입)</p>\n<h3>MultiValueDict</h3>\n<hr>\n<blockquote>\n<p>dict을 상속받은 클래스</p>\n<p>동일 key의 다수 value를 지원하는 사전</p>\n</blockquote>\n<p>http 요청에서는 하나의 key에 대해서 여러 값을 전달받을 수 있어야 함.</p>\n<p>URL의 QueryString같은 Key로서 다수 Value지정을 지원</p>\n<p>ex) name=TOM&#x26;name=Steve&#x26;name=Hongo</p>\n<h2>HttpResponse</h2>\n<hr>\n<p>어떠한 뷰 함수에 응답 반환값은 무조건 HttpResponse임</p>\n<p>(미들웨어 이미지 캡처)</p>\n<h2>JsonResponse</h2>\n<hr>\n<p><code class=\"language-text\">HttpResponse</code>를 상속받아서 사용 가능</p>\n<p>직렬화 : Json 객체를 문자열로 변환</p>\n<p>장고에는 <code class=\"language-text\">Django JSONEncoder</code>라는게 존재.</p>\n<p>파이썬의 json.JsonEncoder를 상속받아서 DJango 만의 특징에 맞게 변환</p>\n<h2>StreamingHttpResponse</h2>\n<hr>\n<p>효율적인 큰 응답을 위함. &#x26; 메모리를 많이 먹는 응답</p>\n<p>but Django는 short-lived 요청에 맞게 디자인!</p>\n<p>​ 큰 응답시에는 극심한 성능 저하로 이어질 수 있음</p>\n<p>​ : 이럴 때는 별도의 웹 서버등 다른 서비스를 이용하는게 좋음</p>\n<h2>FileResponse</h2>\n<hr>\n<p><code class=\"language-text\">StreamingHttpResponse</code>를 상속받음<br>\n파일 내용 응답에 최적화\nContent-Length, Content-Type, Content-Disposion 헤더 자동 지정<br>\nContent-Disposion : 파일 다운로드 다이로그</p>\n<p>인자인 <code class=\"language-text\">as_attachment</code>를 True로 주면 Content-Disposion 헤더 지정</p>","frontmatter":{"title":"HTTPRequest와 HttpResponse","date":"April 12, 2022","update":null,"tags":["django","askcompany"],"series":"askcompany"},"fields":{"slug":"/httprequest-httpresponse/","readingTime":{"minutes":2.295}}},"seriesList":{"edges":[{"node":{"id":"8fefea4f-9b6f-57a4-a7e4-5aedf423b925","fields":{"slug":"/django-ORM/"},"frontmatter":{"title":"django ORM"}}},{"node":{"id":"86119087-6333-5ffe-a5f6-f42ab50e217e","fields":{"slug":"/rest/"},"frontmatter":{"title":"REST"}}},{"node":{"id":"f82631d3-2495-5141-9090-480ac221f298","fields":{"slug":"/static-media/"},"frontmatter":{"title":"django의 Static & Media 파일"}}},{"node":{"id":"78b9f4e7-a2e2-51b5-894c-6d78a96fb311","fields":{"slug":"/django-admin/"},"frontmatter":{"title":"django ORM"}}},{"node":{"id":"3632237d-c865-57f5-84d3-42504c3efe06","fields":{"slug":"/json/"},"frontmatter":{"title":"작성중 : json 응답뷰 만들기"}}},{"node":{"id":"bb14e873-7ffb-5e44-adaf-418bc7557714","fields":{"slug":"/http-status-code/"},"frontmatter":{"title":"HTTP 상태 코드"}}},{"node":{"id":"54c123f3-caed-5153-832f-931f477f7c6c","fields":{"slug":"/get-absolute-url/"},"frontmatter":{"title":"detail url을 간단하게 하고싶다면, get_absolute_url"}}},{"node":{"id":"619670e5-53bd-549d-ae35-4f7bfc46d7b4","fields":{"slug":"/queryset/"},"frontmatter":{"title":"작성중 : 쓸만해보이는 쿼리셋팁"}}},{"node":{"id":"bf47726e-6688-5b10-9994-37de18c463c8","fields":{"slug":"/CBV-api/"},"frontmatter":{"title":"CBV api 사용해보기"}}},{"node":{"id":"23091801-a214-5f20-98df-ea82cba424a3","fields":{"slug":"/view-decorators/"},"frontmatter":{"title":"decorator를 사용해서 Django view 꾸며보기"}}},{"node":{"id":"cf0a3ceb-264d-527d-a369-8477a225e7cb","fields":{"slug":"/httprequest-httpresponse/"},"frontmatter":{"title":"HTTPRequest와 HttpResponse"}}},{"node":{"id":"8b966cb7-047c-5f95-ab4c-d581964cfaa0","fields":{"slug":"/form-modelform/"},"frontmatter":{"title":"Django의 Form과 ModelForm"}}},{"node":{"id":"47c287be-bd57-553c-809d-6e0b429f2434","fields":{"slug":"/clean-validators/"},"frontmatter":{"title":"장고 폼의 유효성 검사 : clean과 validators"}}},{"node":{"id":"705c8614-423d-5587-87fb-b8c8b39fb2f6","fields":{"slug":"/CBV-api2/"},"frontmatter":{"title":"CBV api 사용해보기2 : crud"}}},{"node":{"id":"dfa69f72-f805-5b2f-b10c-27700449ef51","fields":{"slug":"/messages/"},"frontmatter":{"title":"Django의 Messages Framework"}}},{"node":{"id":"7c003db0-96e2-515f-9554-4034c9b44f25","fields":{"slug":"/serializer/"},"frontmatter":{"title":"REST"}}},{"node":{"id":"33b29129-f5ac-57b7-b66e-814169eebcbc","fields":{"slug":"/LoginView/"},"frontmatter":{"title":"Django LoginView 사용"}}}]},"previous":{"fields":{"slug":"/view-decorators/"},"frontmatter":{"title":"decorator를 사용해서 Django view 꾸며보기"}},"next":{"fields":{"slug":"/form-modelform/"},"frontmatter":{"title":"Django의 Form과 ModelForm"}}},"pageContext":{"id":"cf0a3ceb-264d-527d-a369-8477a225e7cb","series":"askcompany","previousPostId":"23091801-a214-5f20-98df-ea82cba424a3","nextPostId":"8b966cb7-047c-5f95-ab4c-d581964cfaa0"}},"staticQueryHashes":[]}