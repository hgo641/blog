{"componentChunkName":"component---src-templates-post-jsx","path":"/static-media/","result":{"data":{"site":{"siteMetadata":{"title":"hongo"}},"markdownRemark":{"id":"e41b821c-ba53-5e84-a1ae-c7c4cba634b5","excerpt":"1. Static과 Media란? - Static 파일 ​ 개발 리소스로서의 정적인 파일(css, js, image등) ​ 앱/프로젝트 단위로 저장&서빙 - Media 파일 ​ FileField/ImageField를 통해 저장한 모든 파일 ​ DB필드에는 저장 경로를 저장하며 파일은 파일 스토리지에 저장 ​ 프로젝트 단위로 저장&서빙 static 파일은 …","html":"<h3>1. Static과 Media란?</h3>\n<hr>\n<h4>- Static 파일</h4>\n<p>​ 개발 리소스로서의 정적인 파일(css, js, image등)</p>\n<p>​ 앱/프로젝트 단위로 저장&#x26;서빙</p>\n<h4>- Media 파일</h4>\n<p>​ FileField/ImageField를 통해 저장한 모든 파일</p>\n<p>​ DB필드에는 저장 경로를 저장하며 파일은 파일 스토리지에 저장</p>\n<p>​ 프로젝트 단위로 저장&#x26;서빙</p>\n<blockquote>\n<p>static 파일은 배포 전 개발에 필요한 정적 파일들이고 Media 파일은 배포 후 사용자가 웹에 저장한 파일들이다 아마도</p>\n</blockquote>\n<p><code class=\"language-text\">pip install pillow</code> : 이미지 라이브러리</p>\n<p>이미지 필드를 사용하려면 <code class=\"language-text\">pillow</code>를 다운로드해야함</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Post</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    image <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>ImageField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3>2. Media 파일 처리 순서</h3>\n<hr>\n<ol>\n<li>HttpRequest.FILES를 통해 파일이 전달</li>\n<li>뷰 로직이나 폼 로직을 통해, 유효성 검증 수행</li>\n<li>FileField/ImageField 필드에 \"경로(문자열)\"를 저장</li>\n<li>settings.MEDIA_ROOT 경로에 파일이 저장됨</li>\n</ol>\n<h3>3. Media 파일을 위한 settings</h3>\n<hr>\n<h5><code class=\"language-text\">MEDIA_URL</code></h5>\n<p>각 media 파일에 대한 URL Prefix</p>\n<p>필드명.url 속성에 의해서 참조되는 설정</p>\n<h5><code class=\"language-text\">MEDIA_ROOT</code></h5>\n<p>파일 필드를 통한 저장시에 실제 파일을 저장할 ROOT 경로</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">MEDIA_URL <span class=\"token operator\">=</span> <span class=\"token string\">\"/media/\"</span>\nMEDIA_ROOT <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>BASE_DIR<span class=\"token punctuation\">,</span> <span class=\"token string\">'media'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>+<code class=\"language-text\">BASE_DIR</code> ?</p>\n<p><code class=\"language-text\">seetings.py</code>에 선언되어있음.</p>\n<p><code class=\"language-text\">BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))</code></p>\n<p>현재 파일(settings.py)의 절대경로의 부모의 부모 : 워킹디렉토리, 장고 프로젝트의 루트를 가리킴</p>\n<p><code class=\"language-text\">MEDIA_ROOT = os.path.join(BASE_DIR, '..', 'public', 'media')</code></p>\n<p>이렇게 하면 워킹 디렉토리의 부모 dir에서 public이라는 폴더를 생성하고 그 안에 media폴더를 만들겠다는 의미</p>\n<p><code class=\"language-text\">MEDIA_ROOT</code> 설정을 안하면 디폴트로 워킹디렉토리 바로 아래에 이미지파일들이 쌓인다.</p>\n<h3>4. urls.py에 등록</h3>\n<hr>\n<p>urls.py</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>conf<span class=\"token punctuation\">.</span>urls<span class=\"token punctuation\">.</span>static <span class=\"token keyword\">import</span> static\n\n<span class=\"token keyword\">if</span> settings<span class=\"token punctuation\">.</span>DEBUG<span class=\"token punctuation\">:</span> <span class=\"token comment\">#안해도 되긴하는데 배포시에는 접근이 안되게?</span>\n    urlpatterns <span class=\"token operator\">+=</span> static<span class=\"token punctuation\">(</span>settings<span class=\"token punctuation\">.</span>MEDIA_URL<span class=\"token punctuation\">,</span>document_root<span class=\"token operator\">=</span>settings<span class=\"token punctuation\">.</span>MEDIA_ROOT<span class=\"token punctuation\">)</span></code></pre></div>\n<h3>5. Image 호출</h3>\n<hr>\n<p>이미지 객체에는 url이라는 속성이 있어 <code class=\"language-text\">img.url</code>을 통해 해당 이미지의 url을 가져올 수 있다.</p>\n<p>이미지를 띄우고 싶을 때, <code class=\"language-text\">&lt;img src = \"{img.url}\"/></code>로 불러온다면</p>\n<p>장고 보안에 의해 이미지가 안나타나고 &#x3C;img ... /> 문자열 그 자체로 나타난다.</p>\n<p>이미지를 나타내고 싶을 때는 <code class=\"language-text\">mark_safe()</code>를 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">PostAdmin</span><span class=\"token punctuation\">(</span>admin<span class=\"token punctuation\">.</span>ModelAdmin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">photo_tag</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>post<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> post<span class=\"token punctuation\">.</span>photo<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> mark_safe<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'&lt;img src = \"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">.</span>photo<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"/>'</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span></code></pre></div>\n<h3>6. upload_to</h3>\n<p>만약 서비스 크기가 커진다면 쌓이는 이미지 파일또한 많아진다.</p>\n<p>이미지 파일이 많아질경우 파일들이 저장되는 위치를 폴더별로 나누려면 <code class=\"language-text\">upload_to</code>를 사용한다.</p>\n<p>ex)</p>\n<p><code class=\"language-text\">photo = models.ImageField(blank = True, upload_to ='board/post/%Y/%m/%d')</code></p>\n<blockquote>\n<p>이미지 파일들이 작성한 year, month, day에 따라 분류된다.</p>\n</blockquote>\n<p>문자열이 아니라 함수로도 설정할 수 있다.</p>\n<ul>\n<li>문자열로 지정 : 파일을 저장할 중간 디렉토리 경로로서 활용</li>\n<li>함수로 지정 : 중간 디렉토리 경로 및 파일명까지 결정 가능</li>\n</ul>\n<h3>6. FileField</h3>\n<hr>\n<p><strong>File Field</strong>는 <strong>File Storage API</strong>를 통해 파일을 저장</p>\n<p>해당 필드를 옵션 필드를 두고자 할 경우 null이 아닌 <code class=\"language-text\">blank = True</code>를 사용한다.</p>","frontmatter":{"title":"django의 Static & Media 파일","date":"April 05, 2022","update":null,"tags":["django"],"series":"askcompany"},"fields":{"slug":"/static-media/","readingTime":{"minutes":3.99}}},"seriesList":{"edges":[{"node":{"id":"8c418e59-f9a5-5fdb-8f42-e3dff2ff08a9","fields":{"slug":"/django-ORM/"},"frontmatter":{"title":"django ORM"}}},{"node":{"id":"3fab5510-8f86-511d-b0a7-6031ea7f95f8","fields":{"slug":"/rest/"},"frontmatter":{"title":"REST"}}},{"node":{"id":"e41b821c-ba53-5e84-a1ae-c7c4cba634b5","fields":{"slug":"/static-media/"},"frontmatter":{"title":"django의 Static & Media 파일"}}},{"node":{"id":"32500d0b-16dd-5e7c-a16c-b45dd8cf9f0c","fields":{"slug":"/django-admin/"},"frontmatter":{"title":"django ORM"}}},{"node":{"id":"c52011a6-a94e-5aa8-9612-9c3a352654e9","fields":{"slug":"/json/"},"frontmatter":{"title":"작성중 : json 응답뷰 만들기"}}},{"node":{"id":"97fa8fe6-4603-5a9f-b2f0-c32be0c80118","fields":{"slug":"/view-decorators/"},"frontmatter":{"title":"decorator를 사용해서 Django view 꾸며보기"}}},{"node":{"id":"125af04d-f31e-5dd0-8176-39fec9d54510","fields":{"slug":"/CBV-api/"},"frontmatter":{"title":"CBV api 사용해보기"}}},{"node":{"id":"34e238b9-dd92-5457-846a-8b6d13e76798","fields":{"slug":"/queryset/"},"frontmatter":{"title":"작성중 : 쓸만해보이는 쿼리셋팁"}}},{"node":{"id":"cdf383e6-f2a6-5939-8887-e7501d318084","fields":{"slug":"/http-status-code/"},"frontmatter":{"title":"HTTP 상태 코드"}}},{"node":{"id":"8f38a40f-0d0e-5e23-9922-b0286f3b8a2b","fields":{"slug":"/get-absolute-url/"},"frontmatter":{"title":"detail url을 간단하게 하고싶다면, get_absolute_url"}}},{"node":{"id":"9ea22a57-02a3-5785-af73-eaabf2a736b4","fields":{"slug":"/httprequest-httpresponse/"},"frontmatter":{"title":"HTTPRequest와 HttpResponse"}}},{"node":{"id":"e3bfa53a-3d48-554e-beb7-4648630c16d0","fields":{"slug":"/form-modelform/"},"frontmatter":{"title":"Django의 Form과 ModelForm"}}},{"node":{"id":"6fb810bb-d784-5bde-8528-947db9b3fd9f","fields":{"slug":"/clean-validators/"},"frontmatter":{"title":"장고 폼의 유효성 검사 : clean과 validators"}}},{"node":{"id":"1f084815-ec52-5f58-a947-ec38e1f5a9f0","fields":{"slug":"/messages/"},"frontmatter":{"title":"Django의 Messages Framework"}}},{"node":{"id":"24b75555-99e9-5cf5-b345-7f02926c7b6d","fields":{"slug":"/CBV-api2/"},"frontmatter":{"title":"CBV api 사용해보기2 : crud"}}},{"node":{"id":"c2a4c8ba-644c-5a2e-a5fb-fefc3d400a11","fields":{"slug":"/serializer/"},"frontmatter":{"title":"REST"}}},{"node":{"id":"71a681c8-2fc0-5652-ba2c-5ad25267c318","fields":{"slug":"/LoginView/"},"frontmatter":{"title":"Django LoginView 사용"}}}]},"previous":{"fields":{"slug":"/alpha-beta-pruning/"},"frontmatter":{"title":"Minimax 알고리즘 & alpha-beta 가지치기"}},"next":{"fields":{"slug":"/django-admin/"},"frontmatter":{"title":"django ORM"}}},"pageContext":{"id":"e41b821c-ba53-5e84-a1ae-c7c4cba634b5","series":"askcompany","previousPostId":"a6448905-d40e-5594-b29f-df2a230f9a13","nextPostId":"32500d0b-16dd-5e7c-a16c-b45dd8cf9f0c"}},"staticQueryHashes":[]}