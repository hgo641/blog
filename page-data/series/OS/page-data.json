{"componentChunkName":"component---src-templates-series-jsx","path":"/series/OS","result":{"data":{"posts":{"nodes":[{"excerpt":"OS(운영체제)란? 컴퓨터 시스템의 자원들을 효율적으로 관리하며 사용자가 컴퓨터를 편리하고, 효과적으로 사용할 수 있도록 환경을 제공하는 여러 프로그램의 모임.\n사용자와 하드웨어간의 인터페이스로서 동작하는 시스템 소프트웨어의 일종으로, 다른 응용프로그램이 유용한 작업을 할 수 있도록 환경을 제공해줌.\nex) Windows, Linux OS의 역할 reso…","fields":{"slug":"/1-2/"},"frontmatter":{"date":"March 29, 2022","update":null,"title":"OS의 역할과 역사","tags":["OS"]}},{"excerpt":"1. OS의 구조  GUI : 그래픽 UI ex. 마우스 커서 command line : 커맨드입력창 시스템콜 : os 내부 기능 활용 커널(그림의 services) 2. 컴퓨터 하드웨어 CPU DISK disk controller memory 📌 bus\n등등... System bus Data bus\n서로 데이터를 주고받음 Command/Address b…","fields":{"slug":"/os-structure/"},"frontmatter":{"date":"March 29, 2022","update":null,"title":"2-1 OS의 구조","tags":["OS"]}},{"excerpt":"스케줄링 policy : CPU를 누구한테 할당할까\n하나의 응용프로그램이 있을때 시피유 버스트와 아이오 버스트로 나뉨.\n각각의 프로세스마다 시피유 버스타한 부분이 있을텐데 이를 어떻게 시피유에 할당해주냐 FCFS 가장 간단한 방법. 줄 선 순서대로. 먼저 온 프로세스부터 처리 하나의 cpu burst한 부분을 단위로 cpu 스케줄링을 함 24, 3, 3 …","fields":{"slug":"/5-2/"},"frontmatter":{"date":"March 30, 2022","update":null,"title":"OS 스케줄링","tags":["OS"]}},{"excerpt":"📌 Interrupt CPU 외부에서 CPU한테 이벤트를 알려주면서 CPU를 멈추게함\n각각의 인터럽트는 cpu가 수행할 인터럽트 서비스 루틴(ISR)이 존재 특정 인터럽트가 오면 그에 해당하는 ISR이 실행된다 Interrupt vector : inturrupt와 ISR을 매칭시켜놓음. 모든 서비스 루틴에 대한 주소를 가지고 있음. cpu 내에서 일어난건…","fields":{"slug":"/interrupts-mechanism/"},"frontmatter":{"date":"March 30, 2022","update":null,"title":"2-2 Interrupt 메카니즘","tags":["OS"]}},{"excerpt":"Compilation System Compilation System Pre-processing : c코드 형태, #include, define등 전처리 컴파일러 : 어셈블리어 형태로 어셈블러 : 기계어 형태로 링커 : 여러 코드파일들을 하나의 실행파일로 합쳐줌 ex. printf.o + hello.o excutable 파일 text segement: 기계…","fields":{"slug":"/3-1/"},"frontmatter":{"date":"April 20, 2022","update":null,"title":"3-1","tags":["OS"]}},{"excerpt":"Process 여기부터 중요하네 ... os는 프로세스를 중심으로 관리 Process Concept program은 passive process는 active 컴퓨터내에서 돌아가는 일의 단위 실행중인 프로그램 특정한 프로세스 상태를 갖는 컨텍스트 안에서 돌아가는 실행의 흐름 excution stream : 한줄한줄 실행하고있는 바로 그 상태! proces…","fields":{"slug":"/3-2/"},"frontmatter":{"date":"April 20, 2022","update":null,"title":"3-2 프로세스 탐구","tags":["OS"]}},{"excerpt":"fork() fork()라는 system call은 new process를 생성한다 (cloning) system call : 사용자가 os커널한테 요청하는 api fork() process 현재 프로세스 중지하고 state를 저장 현재 프로세스의 code, data, stack, heap + pcb를 복사해서 새로운 프로세스를 생성 (전부 똑같은건 아니…","fields":{"slug":"/4-1/"},"frontmatter":{"date":"April 20, 2022","update":null,"title":"4-1","tags":["OS"]}},{"excerpt":"Dispatcher os의 프로세스를 구동하는 부분의 가장 안쪽이다 디스패처의 역할! 어떤 프로세스를 돌리고 스탑, 상태 세이브 다른 프로세스의 스테이트를 로드해옴 switching context switching to user mode : 디스패처가 호출되는 시점은 커널모드.(os가 수행중) 바꿔주는 역할을 다 하고 나면 새로운 프로세스로 돌아가야함(유…","fields":{"slug":"/4-2/"},"frontmatter":{"date":"April 21, 2022","update":null,"title":"4-2","tags":["OS"]}}]}},"pageContext":{"series":"OS"}},"staticQueryHashes":[]}