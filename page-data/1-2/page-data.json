{"componentChunkName":"component---src-templates-post-jsx","path":"/1-2/","result":{"data":{"site":{"siteMetadata":{"title":"hongo"}},"markdownRemark":{"id":"ac934700-c8a1-56ac-91a7-350a3b21aa36","excerpt":"OS(운영체제)란? 컴퓨터 시스템의 자원들을 효율적으로 관리하며 사용자가 컴퓨터를 편리하고, 효과적으로 사용할 수 있도록 환경을 제공하는 여러 프로그램의 모임.\n사용자와 하드웨어간의 인터페이스로서 동작하는 시스템 소프트웨어의 일종으로, 다른 응용프로그램이 유용한 작업을 할 수 있도록 환경을 제공해줌.\nex) Windows, Linux OS의 역할 reso…","html":"<h2>OS(운영체제)란?</h2>\n<p>컴퓨터 시스템의 자원들을 효율적으로 관리하며 사용자가 컴퓨터를 편리하고, 효과적으로 사용할 수 있도록 환경을 제공하는 여러 프로그램의 모임.\n사용자와 하드웨어간의 인터페이스로서 동작하는 시스템 소프트웨어의 일종으로, 다른 응용프로그램이 유용한 작업을 할 수 있도록 환경을 제공해줌.\nex) Windows, Linux</p>\n<h2>OS의 역할</h2>\n<ul>\n<li>resource allocator</li>\n<li>program controller</li>\n</ul>\n<p>for 유저의 편리한 사용\nfor 좋은 성능</p>\n<ul>\n<li>공유된 컴퓨터\n큰 서버의 shared resource를 어떻게 분배할 것인가\nhandheld computers는 리소스가 작음. 배터리 처리\n임베디드 컴퓨터는 유저 인터페이스가 없는 경우가 있어 os가 처리</li>\n</ul>\n<h2>OS의 역사</h2>\n<h2>1. (Early 1950s - Mid 1960s)</h2>\n<p>하드웨어가 비쌈\ngoal : 어떻게 하드웨어를 효율적으로 사용할 것인가\npunch card를 사용해 하나하나 코딩\n사람이 os의 역할을 수행 (operator)</p>\n<ul>\n<li>카드를 받고 출력을 해서 유저에게 전달\n📌 **slow job to job **</li>\n</ul>\n<hr>\n<h3>Simple batch monitor(여러개의 job을 묶음)</h3>\n<p>저성능 컴퓨터, 고성능 컴퓨터 함께 사용\n저성능은 인풋, 아웃풋\n고성능은 연산</p>\n<p><strong>io할 때는 cpu연산 못함</strong></p>\n<p><bold> faster job to job </bold></p>\n<hr>\n<h3>batch monitor(최초의 os)</h3>\n<p>📌 <strong>하드웨어 메커니즘이 나옴 - I/O와 CPU 분리</strong>\nI/O를 하는동안 cpu연산을 못해서 분리</p>\n<p>inturrupt : cpu에게 I/O작업이 끝났음을 알려줌</p>\n<p>📌 <strong>버퍼링과 interrupt 핸들링작업이 os에 추가됨</strong></p>\n<ul>\n<li>computation과 비동기적(async) I/O가 분리됨</li>\n</ul>\n<p>sync I/O - read : 읽어와야 다음 작업 가능\nasync I/O - write : 쓰는 행위는 다음 작업에 영향을 안끼침\n(모든 read가 sync, write가 async인건 아니지만 대체로 그러함)</p>\n<h3>Multi-programmed batch monitor</h3>\n<ul>\n<li>📌 <strong>동시에 둘 이상의 active한 job(시작되었으나 아직 끝나지않은 작업)을 수행</strong></li>\n<li>sync I/O도 분리</li>\n<li>Degree of multiprogramming >= 1 : active job을 얼마나 수행할 수 있는지</li>\n</ul>\n<h4>멀티 프로그래밍이 생기면서 시작된 문제들</h4>\n<p>* Memory protection and relocation\n하나의 job이 실수로 다른 job에 영향을 끼침\n다른 job의 addr를 침범\n하나의 메모리공간에 여러 job이 올라감. job의 주소 공간 예측 불가능 - 로지컬 주소와 피지컬 주소의 구분이 생김\n-> MMU(Memory-Management-Unit)</p>\n<p>* Higher utilization</p>\n<p>* Concurrent programming\n하나의 자원을 공유하면서 생기는 문제</p>\n<h2>2. (Mid 1960s - Mid 1990s)</h2>\n<p>하드웨어가 저렴해짐, 인력이 비싸짐\ngoal: 인력을... 효율적으로 ...</p>\n<h3>Interactive time-sharing OS</h3>\n<p>하나의 cpu를 분할해서 여러 사람들이 사용</p>\n<ul>\n<li>터미널이 저렴 : 메인컴퓨터 하나에 여러 터미널 존재</li>\n<li>파일 시스템 등장</li>\n<li>Response time과 protection이 더욱 중요해짐</li>\n</ul>\n<h3>PC OS - personal computer</h3>\n<p>각자 컴퓨터가 생김\nOS가 subroutine libaray로 나눠짐(OS를 큰 기능별로 나눠서 사용)</p>\n<h2>3.(Mid 1990s - )</h2>\n<ul>\n<li>인터넷\nNetwork I/O가 생김</li>\n<li>동영상등 멀티미디어 서포트\nQoS(Quality of Service)\n-> OS scheduling 발전\n예전 : priority - 우선순위 기반\n멀티미디어 서포트 이후 : badwidth 기반 - 각각의 프로세스에게 조금씩 할당</li>\n<li>connected multimedia services\n스트리밍</li>\n<li>모바일\n적은 리소스, 배터리를 효율적으로 관리</li>\n<li>클라우드 컴퓨팅\nvirtualzation</li>\n</ul>\n<h2>OS의 특징</h2>\n<ul>\n<li>Large\n수천만 라인</li>\n<li>Complex\n비동기적인 behaviors의 집합체\n하드웨어 특성의 이해 필요</li>\n<li>Poorly understood\n오랜시간동안 기능이 추가되며 만들어짐\n코드에 대한 이해도가 떨어져감</li>\n</ul>","frontmatter":{"title":"OS의 역할과 역사","date":"March 29, 2022","update":null,"tags":["OS"],"series":"OS"},"fields":{"slug":"/1-2/","readingTime":{"minutes":4.835}}},"seriesList":{"edges":[{"node":{"id":"ac934700-c8a1-56ac-91a7-350a3b21aa36","fields":{"slug":"/1-2/"},"frontmatter":{"title":"OS의 역할과 역사"}}},{"node":{"id":"edf85d35-a010-51bd-95cb-e4ce77cb5311","fields":{"slug":"/os-structure/"},"frontmatter":{"title":"2-1 OS의 구조"}}},{"node":{"id":"59cf7019-4f7b-5fb7-b96f-3bcf7a49789a","fields":{"slug":"/5-2/"},"frontmatter":{"title":"OS 스케줄링"}}},{"node":{"id":"2f8b7cec-b188-5256-88ee-d2ee43663d54","fields":{"slug":"/interrupts-mechanism/"},"frontmatter":{"title":"2-2 Interrupt 메카니즘"}}},{"node":{"id":"3ce6c8ef-171c-515d-8439-79b45f5e3076","fields":{"slug":"/3-1/"},"frontmatter":{"title":"3-1"}}},{"node":{"id":"16f5a932-6b37-5240-976b-d657b8812a88","fields":{"slug":"/3-2/"},"frontmatter":{"title":"3-2 프로세스 탐구"}}},{"node":{"id":"1a9e00c7-a3b4-5079-9382-4ec7f5e7d178","fields":{"slug":"/4-1/"},"frontmatter":{"title":"4-1"}}},{"node":{"id":"3c3d7c71-bf68-593e-9b21-c03bfff45743","fields":{"slug":"/4-2/"},"frontmatter":{"title":"4-2"}}}]},"previous":{"fields":{"slug":"/django-ORM/"},"frontmatter":{"title":"django ORM"}},"next":{"fields":{"slug":"/os-structure/"},"frontmatter":{"title":"2-1 OS의 구조"}}},"pageContext":{"id":"ac934700-c8a1-56ac-91a7-350a3b21aa36","series":"OS","previousPostId":"8fefea4f-9b6f-57a4-a7e4-5aedf423b925","nextPostId":"edf85d35-a010-51bd-95cb-e4ce77cb5311"}},"staticQueryHashes":[]}